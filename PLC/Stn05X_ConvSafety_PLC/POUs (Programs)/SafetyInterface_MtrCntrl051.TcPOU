<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="SafetyInterface_MtrCntrl051" Id="{10c89f34-e83e-40f6-8da5-3c17679cd46d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SafetyInterface_MtrCntrl051
VAR
	
	pMtrRunning: POINTER TO ConvMtrRunningPuck;
	pSafety: POINTER TO Plc2PlcDataSafetyPuckConv;
	
// Stn051_05_StnMain.MotorCtrl
// Call to motor control function block for each main line motor	
// Blue Return - Enc52:  5,6  Enc53: 3,4,5,6
// Red Return  - Enc52:  3,4   Enc53:2
// Grn Return  - Enc52: 1,2   Enc53: 1
//  Blu receive bypass - Enc52: 7
	{attribute 'TcLinkToOSO':= '	
		.Enc052Mtr01.iDisconnectOk :=  <0,1,3>TIIB[N16S00 (AL1332)]^N16S03 (AL2341)^TxPDO^input byte 3;
		.Enc052Mtr02.iDisconnectOk :=  <0,1,3>TIIB[N16S00 (AL1332)]^N16S07 (AL2341)^TxPDO^input byte 1;
		.Enc052Mtr03.iDisconnectOk :=  <0,1,4>TIIB[N16S00 (AL1332)]^N16S03 (AL2341)^TxPDO^input byte 1;
		.Enc052Mtr04.iDisconnectOk :=  <0,1,3>TIIB[N16S00 (AL1332)]^N16S07 (AL2341)^TxPDO^input byte 3;
		.Enc052Mtr05.iDisconnectOk :=  <0,1,4>TIIB[N16S00 (AL1332)]^N16S03 (AL2341)^TxPDO^input byte 3;
		.Enc052Mtr06.iDisconnectOk :=  <0,1,4>TIIB[N16S00 (AL1332)]^N16S07 (AL2341)^TxPDO^input byte 1;
		.Enc052Mtr07.iDisconnectOk :=  <0,1,4>TIIB[N16S00 (AL1332)]^N16S07 (AL2341)^TxPDO^input byte 3;
		.Enc053Mtr01.iDisconnectOk :=  <0,1,2>TIIB[N21S00 (AL1332)]^N21S01 (AL2341)^TxPDO^input byte 3;
		.Enc053Mtr02.iDisconnectOk :=  <0,1,3>TIIB[N21S00 (AL1332)]^N21S01 (AL2341)^TxPDO^input byte 1;
		.Enc053Mtr03.iDisconnectOk :=  <0,1,3>TIIB[N21S00 (AL1332)]^N21S01 (AL2341)^TxPDO^input byte 1;
		.Enc053Mtr04.iDisconnectOk :=  <0,1,3>TIIB[N21S00 (AL1332)]^N21S01 (AL2341)^TxPDO^input byte 1;
		.Enc053Mtr05.iDisconnectOk :=  <0,1,4>TIIB[N24S00 (AL1332)]^N24S05 (AL2341)^TxPDO^input byte 3;
		.Enc053Mtr06.iDisconnectOk :=  <0,1,3>TIIB[N21S00 (AL1332)]^N21S01 (AL2341)^TxPDO^input byte 1'}
	{attribute 'TcLinkTo':= '	
		.Enc052Mtr01.iOverloadTripped := TIIB[N15S06 (EL1008)]^Channel 6^Input;
		.Enc052Mtr02.iOverloadTripped := TIIB[N15S06 (EL1008)]^Channel 8^Input;
		.Enc052Mtr03.iOverloadTripped := TIIB[N15S07 (EL1008)]^Channel 2^Input;
		.Enc052Mtr04.iOverloadTripped := TIIB[N15S07 (EL1008)]^Channel 4^Input;
		.Enc052Mtr05.iOverloadTripped := TIIB[N15S07 (EL1008)]^Channel 6^Input;
		.Enc052Mtr06.iOverloadTripped := TIIB[N15S07 (EL1008)]^Channel 8^Input;
		.Enc052Mtr07.iOverloadTripped := TIIB[N15S08 (EL1008)]^Channel 2^Input;
		.Enc053Mtr01.iOverloadTripped := TIIB[N20S06 (EL1008)]^Channel 6^Input;
		.Enc053Mtr02.iOverloadTripped := TIIB[N20S06 (EL1008)]^Channel 8^Input;
		.Enc053Mtr03.iOverloadTripped := TIIB[N20S07 (EL1008)]^Channel 2^Input;
		.Enc053Mtr04.iOverloadTripped := TIIB[N20S07 (EL1008)]^Channel 4^Input;
		.Enc053Mtr05.iOverloadTripped := TIIB[N20S07 (EL1008)]^Channel 6^Input;
		.Enc053Mtr06.iOverloadTripped := TIIB[N20S07 (EL1008)]^Channel 8^Input;
		.Enc052Mtr01.iRunning := TIIB[N15S06 (EL1008)]^Channel 5^Input;
		.Enc052Mtr02.iRunning := TIIB[N15S06 (EL1008)]^Channel 7^Input;
		.Enc052Mtr03.iRunning := TIIB[N15S07 (EL1008)]^Channel 1^Input;
		.Enc052Mtr04.iRunning := TIIB[N15S07 (EL1008)]^Channel 3^Input;
		.Enc052Mtr05.iRunning := TIIB[N15S07 (EL1008)]^Channel 5^Input;
		.Enc052Mtr06.iRunning := TIIB[N15S07 (EL1008)]^Channel 7^Input;
		.Enc052Mtr07.iRunning := TIIB[N15S08 (EL1008)]^Channel 1^Input;
		.Enc053Mtr01.iRunning := TIIB[N20S06 (EL1008)]^Channel 5^Input;
		.Enc053Mtr02.iRunning := TIIB[N20S06 (EL1008)]^Channel 7^Input;
		.Enc053Mtr03.iRunning := TIIB[N20S07 (EL1008)]^Channel 1^Input;
		.Enc053Mtr04.iRunning := TIIB[N20S07 (EL1008)]^Channel 3^Input;
		.Enc053Mtr05.iRunning := TIIB[N20S07 (EL1008)]^Channel 5^Input;
		.Enc053Mtr06.iRunning := TIIB[N20S07 (EL1008)]^Channel 7^Input;
		.Enc052Mtr01.oRun := TIIB[N15S12 (EL2008)]^Channel 5^Output;
		.Enc052Mtr02.oRun := TIIB[N15S12 (EL2008)]^Channel 6^Output;
		.Enc052Mtr03.oRun := TIIB[N15S12 (EL2008)]^Channel 7^Output;
		.Enc052Mtr04.oRun := TIIB[N15S12 (EL2008)]^Channel 8^Output;
		.Enc052Mtr05.oRun := TIIB[N15S13 (EL2008)]^Channel 1^Output;
		.Enc052Mtr06.oRun := TIIB[N15S13 (EL2008)]^Channel 2^Output;
		.Enc052Mtr07.oRun := TIIB[N15S13 (EL2008)]^Channel 3^Output;
		.Enc053Mtr01.oRun := TIIB[N20S12 (EL2008)]^Channel 4^Output;
		.Enc053Mtr02.oRun := TIIB[N20S12 (EL2008)]^Channel 5^Output;
		.Enc053Mtr03.oRun := TIIB[N20S12 (EL2008)]^Channel 6^Output;
		.Enc053Mtr04.oRun := TIIB[N20S12 (EL2008)]^Channel 7^Output;
		.Enc053Mtr05.oRun := TIIB[N20S12 (EL2008)]^Channel 8^Output;
		.Enc053Mtr06.oRun := TIIB[N20S13 (EL2008)]^Channel 1^Output'}
	MtrCtrls: ConvMtrCtrlsPuck;

	MtrNOKtoRun : BOOL;	  	//not used at this time, see the attached action for details.
	cntMotorStartIndex: DINT;	
	tmrMotorStartIndex: TON;


END_VAR
VAR CONSTANT	
	
	cMaxMotorStartIndex :DINT := 9;  //If starting pairs of motors  adjust to max number of motors "per enclosure" /2
	
END_VAR	]]></Declaration>
    <Implementation>
      <ST><![CDATA[pMtrRunning := ADR(gProduced_SafetyInterfaceConv.MtrRunning);
pSafety := ADR(gProduced_SafetyInterfaceConv);

//Create sequenced motor start index - to prevent inrush overloads at time of motor start		
tmrMotorStartIndex(IN:=NOT tmrMotorStartIndex.Q,PT:=T#300ms);		
IF tmrMotorStartIndex.Q THEN 		
	cntMotorStartIndex := cntMotorStartIndex + 1;	
	IF cntMotorStartIndex > cMaxMotorStartIndex THEN 	
		cntMotorStartIndex := 1;
	END_IF	
END_IF		

// Call action code block that does call for each main line motor		
MotorCtrl();

//distibute the incoming stn data (consumed data from stn) to single produced outgoing to all stns
//MEMCPY(ADR(gProduced_SafetyInterfaceConv.gMtrRunningStn051), ADR(gMtrRunning), SizeOf(gProduced_SafetyInterfaceConv.gMtrRunningStn051));
]]></ST>
    </Implementation>
    <Action Name="MotorCtrl" Id="{25a6197f-86ab-4eba-9db2-3b52f4792434}">
      <Implementation>
        <ST><![CDATA[// Stn051_05_StnMain.MotorCtrl
// Call to motor control function block for each main line motor	
// Blue Return - Enc52:  5,6  Enc53: 3,4,5,6
// Red Return  - Enc52:  3,4   Enc53:2
// Grn Return  - Enc52: 1,2   Enc53: 1
//  Blu receive bypass - Enc52: 7

MtrCtrls.Enc052Mtr01(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 1,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr1',
	MtrRunning => pMtrRunning^.Enc052Mtr01);

MtrCtrls.Enc052Mtr02(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 1,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr2',
	MtrRunning => pMtrRunning^.Enc052Mtr02);

MtrCtrls.Enc052Mtr03(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 2,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr3',
	MtrRunning => pMtrRunning^.Enc052Mtr03);

MtrCtrls.Enc052Mtr04(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 2,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr4',
	MtrRunning => pMtrRunning^.Enc052Mtr04);

MtrCtrls.Enc052Mtr05(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 3,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr5',
	MtrRunning => pMtrRunning^.Enc052Mtr05);

MtrCtrls.Enc052Mtr06(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 3,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr6',
	MtrRunning => pMtrRunning^.Enc052Mtr06);

MtrCtrls.Enc052Mtr07(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc052.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 4,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc052-Mtr7',
	MtrRunning => pMtrRunning^.Enc052Mtr07);

MtrCtrls.Enc053Mtr01(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 1,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr1',
	MtrRunning => pMtrRunning^.Enc053Mtr01);

MtrCtrls.Enc053Mtr02(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 1,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr2',
	MtrRunning => pMtrRunning^.Enc053Mtr02);

MtrCtrls.Enc053Mtr03(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 2,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr3',
	MtrRunning => pMtrRunning^.Enc053Mtr03);

MtrCtrls.Enc053Mtr04(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 2,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr4',
	MtrRunning => pMtrRunning^.Enc053Mtr04);

MtrCtrls.Enc053Mtr05(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 3,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr5',
	MtrRunning => pMtrRunning^.Enc053Mtr05);

MtrCtrls.Enc053Mtr06(	
	CycleAuto := gConsumed_Stn051ToSafetyInterface.CycleAuto,
	CycleReset := gConsumed_Stn051ToSafetyInterface.CycleReset,
	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped,	
//	NOKtoRun := pSafety^.Enc053.iEstopRlyTripped OR 
//		NOT gConsumed_Stn051ToSafetyInterface.Stn051PLCData[2].3 OR 
//		NOT gConsumed_Stn051ToSafetyInterface_OK,		
	StartIndexThisMotor := 3,
	StartIndexCurrent := cntMotorStartIndex,
	hoMtrName := 'Enc053-Mtr6',
	MtrRunning => pMtrRunning^.Enc053Mtr06);
	
//For each motor that the station needs running information but NOT actually controlling the output… 
//(populate the running bit from the produced consumed logic)

// Populate motor running for motors controlled (outputs linked) by other stations
//gMtrRunning.Enc062Mtr07 := gConsumed_Stn901To902.ScratchPad[10].0;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="SafetyInterface_MtrCntrl051">
      <LineId Id="992" Count="2" />
      <LineId Id="444" Count="7" />
      <LineId Id="989" Count="2" />
      <LineId Id="891" Count="0" />
      <LineId Id="893" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SafetyInterface_MtrCntrl051.MotorCtrl">
      <LineId Id="673" Count="7" />
      <LineId Id="809" Count="0" />
      <LineId Id="835" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="848" Count="2" />
      <LineId Id="810" Count="0" />
      <LineId Id="684" Count="4" />
      <LineId Id="811" Count="0" />
      <LineId Id="836" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="851" Count="2" />
      <LineId Id="691" Count="5" />
      <LineId Id="813" Count="0" />
      <LineId Id="837" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="854" Count="2" />
      <LineId Id="699" Count="5" />
      <LineId Id="815" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="816" Count="0" />
      <LineId Id="857" Count="2" />
      <LineId Id="707" Count="5" />
      <LineId Id="817" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="818" Count="0" />
      <LineId Id="860" Count="2" />
      <LineId Id="715" Count="5" />
      <LineId Id="819" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="863" Count="2" />
      <LineId Id="723" Count="5" />
      <LineId Id="821" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="866" Count="2" />
      <LineId Id="731" Count="5" />
      <LineId Id="823" Count="0" />
      <LineId Id="842" Count="0" />
      <LineId Id="824" Count="0" />
      <LineId Id="869" Count="2" />
      <LineId Id="739" Count="5" />
      <LineId Id="825" Count="0" />
      <LineId Id="843" Count="0" />
      <LineId Id="826" Count="0" />
      <LineId Id="872" Count="2" />
      <LineId Id="747" Count="5" />
      <LineId Id="827" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="828" Count="0" />
      <LineId Id="875" Count="2" />
      <LineId Id="755" Count="5" />
      <LineId Id="829" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="878" Count="2" />
      <LineId Id="763" Count="5" />
      <LineId Id="831" Count="0" />
      <LineId Id="846" Count="0" />
      <LineId Id="832" Count="0" />
      <LineId Id="881" Count="2" />
      <LineId Id="771" Count="5" />
      <LineId Id="833" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="834" Count="0" />
      <LineId Id="884" Count="2" />
      <LineId Id="779" Count="3" />
      <LineId Id="162" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>