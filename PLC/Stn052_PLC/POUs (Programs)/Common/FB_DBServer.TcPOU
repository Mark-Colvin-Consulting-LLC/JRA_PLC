<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_DBServer" Id="{10041cb9-cffb-48e5-8e29-790c1d3925ed}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DBServer
VAR_INPUT
	JRSQLNetId : T_AmsNetID := ''; //AMS address JRSQL
	ProjectDBDefs : IProjectDBDefs; //Instance of the custom database FB for this database
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//Property backing variables
	_NextTransactionID : UDINT := 0;
	_BackgroundQueue : FB_DataStore(bFIFO:=TRUE, nSize:=cMaxBackgroundQueueSize);
	_Connected : BOOL := FALSE;
	
	//buffers
	TransactionHandlers : ARRAY[1..cMaxTransactionHandlers] OF POINTER TO fb_dbtransactionhandler;
	TransactionHandlersSize : INT :=0;
	BackgroundTransactionHandlers : ARRAY[1..cBackgroundTransactionHandlerCount] OF POINTER TO fb_dbbackgroundtransactionhandler;
	
	//'Framework'
	bFirstScan: BOOL := TRUE;
	tmrState:  TON;

	nState:	UDINT	:= 9999;
	nNextState:	UDINT	:= 0;
	bFirstEntry: BOOL;	
	
	//Locals	
	fbADSInfo: ADSRDDEVINFO;
	
	ConnectionError : STRING;
	ResponseTime : TIME;
	JRSQLVersion : DWORD;
	
	i: INT;
	
	idx: INT;
END_VAR

VAR CONSTANT
	cJRSQLPort : UINT := 2020;
	cMaxTransactionHandlers : INT := 100;
	cBackgroundTransactionHandlerCount : INT :=1;
	cMaxBackgroundQueueSize : INT := 50;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstScan THEN
	nNextState:=0;
	nState:=9999;

	FOR idx:=1 TO cBackgroundTransactionHandlerCount DO
		BackgroundTransactionHandlers[idx] := __NEW(fb_dbbackgroundtransactionhandler(pDBServer:=THIS,JRSQLNetId:= THIS^.JRSQLNetId, JRSQLPort := cJRSQLPort, ProjectDBDefs := THIS^.ProjectDBDefs));
	END_FOR
	
	//init 
	fbADSInfo(NETID:=THIS^.JRSQLNetId,PORT:=cJRSQLPort,RDINFO:=FALSE,TMOUT:=T#2S);

	bFirstScan := FALSE;
END_IF

//state machine	
IF nState <> nNextState THEN
	bFirstEntry := TRUE;
	nState := nNextState;
ELSE
	bFirstEntry := FALSE;
END_IF

tmrState(IN:=(NOT bFirstEntry), PT:=T#20S);

CASE nState OF
0: //Verify JRSQL is running
	IF bFirstEntry THEN
		;
	END_IF

	fbADSInfo(RDINFO:=TRUE);

	IF NOT fbADSInfo.Busy THEN
		IF NOT fbADSInfo.ERR THEN
			IF fbADSInfo.DEVNAME='JRSQL' THEN
				ResponseTime := tmrState.ET;
				JRSQLVersion := fbADSINfo.DEVVER;
				nNextState := 100;
			ELSE
				ConnectionError := 'Server responded, not JRSQL';
				nNextState := 5;
			END_IF
		ELSE
			IF fbADSInfo.ERRID = 1861 THEN
				ConnectionError := 'JRSQL response timeout';
				nNextState := 5;	
			ELSE
				ConnectionError := Concat('Error connecting to JRSQL: ', UDINT_TO_STRING(fbADSInfo.ERRID));
				nNextState := 5;	
			END_IF
		END_IF
	END_IF
	
	IF (nState <> nNextState) THEN
		fbADSInfo(RDINFO:=FALSE);
	END_IF
	
5: //Wait and try again
	IF bFirstEntry THEN
		_Connected:=FALSE;
	END_IF
	IF tmrState.ET > T#10S THEN
		nNextState:=0;
	END_IF
	
100: //wait for a command
	IF bFirstEntry THEN
		ConnectionError := '';
		_Connected := TRUE;
	END_IF

	IF tmrState.ET > T#10S THEN
		//Every 10 seconds check jrsql is still responding
		nNextState:=0;
	END_IF

END_CASE

//run owned function blocks
FOR i := 1 TO TransactionHandlersSize DO
   IF TransactionHandlers[i] > 0 THEN
	   TransactionHandlers[i]^(ProjectDBDefs := THIS^.ProjectDBDefs);
   END_IF
END_FOR	

FOR i := 1 TO cBackgroundTransactionHandlerCount DO
   IF BackgroundTransactionHandlers[i] > 0 THEN
      BackgroundTransactionHandlers[i]^(ProjectDBDefs := THIS^.ProjectDBDefs);
   END_IF
END_FOR	]]></ST>
    </Implementation>
    <Method Name="AddBackgroundItem" Id="{8af56bfd-fd22-4df1-aa6a-1346890a7c4d}">
      <Declaration><![CDATA[METHOD AddBackgroundItem : BOOL
VAR_INPUT
	ptr: POINTER TO DBBackgroundItem;
END_VAR
VAR 
	old: POINTER TO DBBackgroundItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//if the queue is full, delete the oldest and add the new one
IF _BackgroundQueue.Count >= _backgroundQueue.Size THEN
	old:=_backgroundqueue.Pop();
	IF old >0 THEN
		__DELETE(old);
	END_IF
END_IF

AddBackgroundItem:= _BackgroundQueue.Push(ptr,FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="BackgroundQueue" Id="{62dce482-50e7-40da-b59b-3b98872f9362}">
      <Declaration><![CDATA[PROPERTY BackgroundQueue : pointer to fb_datastore]]></Declaration>
      <Get Name="Get" Id="{f987e367-0d13-449e-a5ad-acda5a2a9a02}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BackgroundQueue:=adr(_BackgroundQueue);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Connected" Id="{7e299813-f158-4be4-ab94-043332fd4980}">
      <Declaration><![CDATA[PROPERTY Connected : BOOL]]></Declaration>
      <Get Name="Get" Id="{84457af3-544e-4420-97e0-16cc54fb5aba}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Connected := _Connected;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{19f4024c-2d5d-45b5-b5f8-a2b17140dae9}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR

VAR
	idx: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN
	FOR idx:=1 TO TransactionHandlersSize DO
		IF TransactionHandlers[idx] > 0 THEN
			__DELETE(TransactionHandlers[idx]);
			TransactionHandlers[idx]:=0;
		END_IF
	END_FOR 
	FOR idx:=1 TO cBackgroundTransactionHandlerCount DO
		IF BackgroundTransactionHandlers[idx] > 0 THEN
			__DELETE(BackgroundTransactionHandlers[idx]);
			BackgroundTransactionHandlers[idx]:=0;
		END_IF
	END_FOR

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4b56b64a-1c69-4049-82ba-715fc4b73906}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR

VAR
	idx: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInitRetains  THEN
	bFirstScan := TRUE;
	TransactionHandlersSize := 0;	

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTransactionHandler" Id="{2fc0a139-a71f-48ff-b7eb-c3adbbb19efd}">
      <Declaration><![CDATA[METHOD GetTransactionHandler : POINTER TO FB_dbTransactionHandler
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TransactionHandlersSize < cMaxTransactionHandlers THEN
	GetTransactionHandler := __NEW(FB_dbTransactionHandler(pDBServer:=THIS,JRSQLNetId:= THIS^.JRSQLNetId, JRSQLPort := cJRSQLPort, ProjectDBDefs := THIS^.ProjectDBDefs ));
	IF (GetTransactionHandler > 0)THEN
		TransactionHandlersSize := TransactionHandlersSize + 1;
		TransactionHandlers[TransactionHandlersSize] := GetTransactionHandler;
	END_IF
ELSE
	GetTransactionHandler := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DBServer">
      <LineId Id="3" Count="88" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.AddBackgroundItem">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.BackgroundQueue.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.Connected.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.FB_exit">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.FB_init">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBServer.GetTransactionHandler">
      <LineId Id="3" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>