<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_DBBackgroundTransactionHandler" Id="{8334b208-a973-4c66-b233-d90ea6dbb114}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK FB_DBBackgroundTransactionHandler
VAR_INPUT
	ProjectDBDefs : IProjectDBDefs; //Instance of the custom database FB for this database
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//Property backing variables
	_JRSQLNetId : T_AmsNetID;
	_JRSQLPort : T_AmsPort;
	_DBServer : POINTER TO fb_dbserver;
	_Busy : BOOL;
	_Done : BOOL;
	_Error : BOOL;
	_ErrorId : UINT;	
	_ErrorText : STRING;
	
	//'Framework'
	bFirstScan: BOOL := TRUE;
	tmrState:  TON;

	nState:	UDINT	:= 0;
	nNextState:	UDINT	:= 0;
	bFirstEntry: BOOL;	
	
	//Locals
	Triggered : BOOL := FALSE;
	DataReturn : BOOL := FALSE;
	
	ptrBackgroundItem : POINTER TO DBBackgroundItem;
	
	spName :STRING;
	spData: pvoid;
	spDataSize:UDINT;
	
	spDefinition : DBSPDefinition;
	spCallResult : DBSPCallResult;
	
	TransmitBuffer : POINTER TO BYTE;
	TransmitSize : UINT;
	ReceiveBuffer : POINTER TO BYTE;
	ReceiveSize : UINT;
	
	LastProcessTime : TIME;
		
	fbADSReadWrite: ADSRDWRTEX;

END_VAR
VAR CONSTANT
	cJRSQLTimeout : TIME := T#10S;
	cJRSQLCommandExecute : UDINT := 16#1000;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstScan THEN
	nNextState:=0;
	nState:=9999;
	
	fbADSReadWrite(NETID:=_JRSQLNetId,PORT:=_JRSQLPort,WRTRD:=FALSE,TMOUT:=cJRSQLTimeout);
	bFirstScan := FALSE;
END_IF

//state machine	
IF nState <> nNextState THEN
	bFirstEntry := TRUE;
	nState := nNextState;
ELSE
	bFirstEntry := FALSE;
END_IF

tmrState(IN:=(NOT bFirstEntry), PT:=T#20S);

CASE nState OF
0:
	IF bFirstEntry THEN
		_Error:=FALSE;
		_ErrorId := 16#0;
		_ErrorText := '';
		_Done:=FALSE;
	END_IF

	IF _DBServer^.BackgroundQueue^.Count > 0 THEN
		IF _DBServer^.Connected THEN
			ptrBackgroundItem:= _DBServer^.BackgroundQueue^.Pop();
			nNextState := 40;
		ELSE
			nNextState := 10;
		END_IF
	END_IF
	
10://wait for connection
	IF (_DBServer^.Connected) THEN
		nNextState := 0;
	ELSIF tmrState.ET > cJRSQLTimeout THEN
		_ErrorText:='JRSQL connection timeout';		
		_ErrorId := 16#1;
		_Error:=TRUE;
		nNextState	:= 999;
 	END_IF

//States combined to get rid of scan delays	
40: //Call JRSQL
	IF bFirstEntry THEN
	
		spName := ptrBackgroundItem^.SPName;
		spData := ADR(ptrBackgroundItem^.Data);
		spDataSize := ptrBackgroundItem^.DataSize;
	
		IF(ProjectDBDefs.GetSPDef(spName, ADR(spDefinition))) THEN
			TransmitSize := SIZEOF(DBSPDefinition) + spDefinition.InputParamSize;
			ReceiveSize := SIZEOF(DBSPCallResult) + spDefinition.OutputParamSize;

			IF (spDataSize = spDefinition.InputParamSize+spDefinition.OutputParamSize) THEN
				;
			ELSE
				_ErrorText := CONCAT('Procedure data size mismatch. Expected: ',CONCAT(UINT_TO_STRING(spDefinition.InputParamSize+spDefinition.OutputParamSize),CONCAT(' Got: ',UDINT_TO_STRING(spDataSize))));
				_ErrorId:= 16#3;
				_Error:=TRUE;
				nNextState := 999;
			END_IF
		ELSE 
			_ErrorText:='Stored procedure not found';		
			_ErrorId := 16#2;
			_Error:=TRUE;
			nNextState	:= 999;		
		END_IF	
	
		IF (NOT _Error) THEN
			//Allocate buffers
			TransmitSize := SIZEOF(DBSPDefinition) + spDefinition.InputParamSize;
			TransmitBuffer := __NEW(BYTE, TransmitSize);
			MEMSET(TransmitBuffer,0,TransmitSize);
			ReceiveSize := SIZEOF(DBSPCallResult) + spDefinition.OutputParamSize;
			ReceiveBuffer := __NEW(BYTE, ReceiveSize);
			MEMSET(ReceiveBuffer,0,ReceiveSize);
		
			memcpy(TransmitBuffer,ADR(spDefinition),SIZEOF(DBSPDefinition));
			memcpy((TransmitBuffer + SIZEOF(DBSPDefinition)),spData,spDefinition.InputParamSize);
		END_IF
	END_IF

	IF (NOT _Error) THEN
		
		fbADSReadWrite(WRTRD:=TRUE, IDXGRP:=cJRSQLCommandExecute, WRITELEN:=TransmitSize, SRCADDR:= TransmitBuffer, READLEN:=ReceiveSize, DESTADDR:= ReceiveBuffer);

		IF NOT fbADSReadWrite.Busy THEN
			IF NOT fbADSReadWrite.ERR THEN
				memcpy(ADR(spCallResult),ReceiveBuffer,SIZEOF(DBSPCallResult));
			
				IF spCallResult.Result <> 1 THEN
					//Error returned by JRSQL
					_ErrorText := CONCAT('JRSQL error: ',spCallResult.ResultString);
					_ErrorId:= 16#1000 + spCallResult.Result;
					_Error:=TRUE;
					nNextState := 999;
				ELSE
					//Copy result to caller
					memcpy(spData+spDefinition.InputParamSize,ReceiveBuffer+SIZEOF(DBSPCallResult),spDefinition.OutputParamSize);
					LastProcessTime := spCallResult.ProcessTime;
					_Done:=TRUE;
					nNextState := 999;		
				END_IF
			ELSE
				IF fbADSReadWrite.ERRID = 1861 THEN
					_ErrorText := 'JRSQL response timeout';
					_ErrorId:= 16#8;
					_Error:=TRUE;
					nNextState := 999;	
				ELSE
					_ErrorText := Concat('Error communicating to JRSQL: ', UDINT_TO_STRING(fbADSReadWrite.ERRID));
					_ErrorId:= 16#9;
					_Error:=TRUE;
					nNextState := 999;	
				END_IF
			END_IF
		END_IF
	
		IF (nState <> nNextState) THEN
			fbADSReadWrite(WRTRD:=FALSE);
			__DELETE(TransmitBuffer);
			__DELETE(ReceiveBuffer);
		END_IF
	
	END_IF
	
999:
	IF bFirstEntry THEN
		IF NOT _Error THEN
			_Done:=TRUE;
		END_IF
	END_IF
	
	//free the item from the queue now that we have its data
	__DELETE(ptrBackgroundItem);	
	nNextState	:= 0;	

END_CASE	

_Busy := (nState <> 0);
Triggered:=FALSE;
DataReturn:=FALSE;
]]></ST>
    </Implementation>
    <Property Name="Busy" Id="{1781f15e-36fe-4bdf-8222-178e22f1d69b}">
      <Declaration><![CDATA[PROPERTY Busy : bool]]></Declaration>
      <Get Name="Get" Id="{c82eb6ec-c676-4aaf-8838-fffeb65bd694}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Done" Id="{c3228919-401b-4813-8015-41092ff2ebff}">
      <Declaration><![CDATA[PROPERTY Done : bool]]></Declaration>
      <Get Name="Get" Id="{e796d763-ac0f-4e4a-8c1e-c2df63fc026f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := _Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{e81f2142-116b-4ff6-8492-c6d590e6a4d4}">
      <Declaration><![CDATA[PROPERTY Error : bool]]></Declaration>
      <Get Name="Get" Id="{5f84e968-61cf-44ab-9de3-575bf2013d37}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorId" Id="{55a4824e-5f6d-4e03-9444-2f43629265af}">
      <Declaration><![CDATA[PROPERTY ErrorId : UDINT
]]></Declaration>
      <Get Name="Get" Id="{c526f9ee-c47b-4419-83b2-ab7edf66412c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorId := _ErrorId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorText" Id="{584f09a7-085f-4d59-ba06-4a0c8f4157b5}">
      <Declaration><![CDATA[PROPERTY ErrorText : STRING]]></Declaration>
      <Get Name="Get" Id="{049f5500-3321-4e95-bff3-df3640b5ffd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorText := _ErrorText;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{45bb3b50-0e2b-445d-b4d5-9c8f43abb50d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	pDBServer : POINTER TO FB_DBServer;
	JRSQLNetId : T_AmsNetID := ''; //AMS address of JRSQL
	JRSQLPort : T_AmsPort := 2020; //AMS port of JRSQL
	ProjectDBDefs : IProjectDBDefs; //Project database config
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_DBServer := pDBServer;
_JRSQLNetId := JRSQLNetId;
_JRSQLPort := JRSQLPort;
THIS^.ProjectDBDefs := ProjectDBDefs;

IF bInitRetains THEN
	bFirstScan := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DBBackgroundTransactionHandler">
      <LineId Id="3" Count="146" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.Done.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.ErrorId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.ErrorText.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DBBackgroundTransactionHandler.FB_init">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>