<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_WorkStopMainLnSw" Id="{43c1c4c1-db17-4192-ad9a-bc7eff9efee2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WorkStopMainLnSw
VAR_INPUT
	pStn: POINTER TO Station;
	pCmp: POINTER TO CmpWorkstopMainLnSw;
	pStateTraceBuffer: POINTER TO TraceFIFOBuffer;
	pStateTraceFIFO: POINTER TO FIFO_StateTrace;
	pStats: POINTER TO Component_Stats;
	pWorkstop: POINTER TO CmpConvStop;
END_VAR

VAR
	Local: FrameworkLocal;
	Framework: FB_Framework;

	fbRFID: FB_RFID;
	pTransactionHandler: POINTER TO FB_DBTransactionHandler;
	GetOutputLane: DBGetOutputLane;
	SetDeviceData: DBSetDeviceData;
	memRFIDAutoResetAttempted : BOOL;
	LastReleasedRFID: DINT;
	ManualRFIDWriteStart: BOOL;
	EmptyPuckLnSw: PuckLnSw;


	hiRFIDWriteStart: BOOL;
	hiRFIDWriteID: DINT;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[Local.pStateTraceBuffer := pStateTraceBuffer;
Local.pStateTraceFifo := pStateTraceFifo;
Local.pStats := pStats;

IF gFirstScan THEN
	// Version 01 - 1/8/2023 - Clearing Puck data on exit rather than on entry into state 0
	
	Local.FaultTimeLong := T#10000ms;
	Local.FaultTimeShort := T#6000ms;
	Local.Name := pCmp^.Framework.ComponentIDRecord.Name;
	Local.AltName := '';
	
	pTransactionHandler := gDBServer.GetTransactionHandler();
	
	MEMSET(ADR(EmptyPuckLnSw),0,SIZEOF(EmptyPuckLnSw));
	DfnMessages();
END_IF

FrameWork(pFramework:=ADR(pCmp^.Framework), pLocal:=ADR(Local), pStation:=pStn);

(* Housekeeping *)
//RFID Call
IF ManualRFIDWriteStart THEN
	fbRFID.WriteStart := TRUE;
	fbRFID.WriteID := hiRFIDWriteID;
END_IF
fbRFID();
fbRFID.PLCFirstScan := gFirstScan;
fbRFID.WriteStart := FALSE;
ManualRFIDWriteStart := FALSE;

// Pass out the device present senor so main can judge Pick/Place results itself.
pCmp^.DevicePresent := pWorkstop^.StatusPuckPresent;

//TODO RCC: Implement arrival pending with prestop/corner stop as needed
//pCmp^.ArrivalPending:= pPrestop^.Available OR pPrestop^.Release OR
//			pCorner1Prestop^.Available OR pCorner1Prestop^.Release;

(* #################
    Sequence Logic
   #################*)
CASE Local.State OF
	
	0: (*Wait For Work Request from workstop*)
		
		Local.OKToStop := TRUE;
		
		IF pWorkStop^.WorkReq THEN
			Local.NextState := 10;
		END_IF
	
	10: (*Read/capture RFID Tag*)
		
		(*Note that RFID driver is generally free running and reports RFID number as soon as tag is withing range without any additional prompting.*);
		
		IF fbRFID.Error AND
				memRFIDAutoResetAttempted AND
				NOT pCmp^.Sim.ForceRFID THEN
			Local.NextState := 11;
		ELSIF fbRFID.Error AND
				NOT memRFIDAutoResetAttempted AND
				NOT pCmp^.Sim.ForceRFID THEN
			Local.NextState := 20;
		ELSIF (fbRFID.ReadID <> 0 AND
				fbRFID.ReadValid AND
				NOT fbRFID.Error) OR
				pCmp^.Sim.ForceRFID THEN
			IF pCmp^.Sim.DBBypass THEN
				Local.NextState := 230;
			ELSE
				Local.NextState := 200;
			END_IF
		END_IF
		
		IF Local.State <> Local.NextState THEN
			IF (fbRFID.ReadID <> 0 AND
					fbRFID.ReadValid AND
					NOT fbRFID.Error) AND
					NOT pCmp^.Sim.ForceRFID THEN
				pCmp^.PuckLnSw.RFID := fbRFID.ReadID;
			END_IF;
		END_IF
	
	11: (*Fault: RFID Reader Fault*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	20: (*Reset RFID*)
		
		IF Local.FirstEntry THEN
			memRFIDAutoResetAttempted := TRUE;
			fbRFID.ErrorClear := TRUE;
		END_IF
		
		IF NOT fbRFID.Error THEN
			Local.NextState := 30;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbRFID.ErrorClear := FALSE;
		END_IF
	
	30: (*Restart RFID Reader*)
		
		IF Local.FirstEntry THEN
			fbRFID.ResetStart := TRUE;
		END_IF
		
		IF fbRFID.ResetDone THEN
			Local.NextState := 0;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbRFID.ResetStart := FALSE;
		END_IF
	
	200: (*Verify TransactionHandler Not Busy*)
		
		IF NOT pTransactionHandler^.Busy AND
				NOT pTransactionHandler^.Done AND
				NOT pTransactionHandler^.Error THEN
			Local.NextState := 210;
		END_IF
	
	210: (*Get GetPuckData*)
		
		IF Local.FirstEntry THEN
			Local.StateTimePreset := T#6S;
			memset(ADR(GetOutputLane),0,SIZEOF(GetOutputLane));
			GetOutputLane.inRFID := pCmp^.PuckLnSw.RFID;
			GetOutputLane.inLocation := pCmp^.Config.DBLocation;
		END_IF
		
		Local.LongFaultState := TRUE;
		pTransactionHandler^.ExecuteSP(
		bForeground := TRUE,
		sSPName := cDBProcedure.uspGetOutputLane,
		pData := ADR(GetOutputLane),
		nDataSize :=SIZEOF(GetOutputLane));
		
		IF Local.tmrState.Q THEN
			Local.NextState := 211;
		ELSIF pTransactionHandler^.Done THEN
			IF NOT pTransactionHandler^.Error THEN
				IF GetOutputLane.outReturnCode =
						cDBReturnCode.Success THEN
					Local.NextState := 230;
				ELSE
					Local.NextState := 213;
				END_IF
			ELSE
				Local.NextState := 212;
			END_IF
		END_IF
	
	211: (*Fault: Database transaction timed out*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	212: (*Fault: DBServer reported error*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	213: (*FAULT: DBGetPuckData failed*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	230: (*Copy Needed Data to Device*)
		
		IF Local.FirstEntry THEN
			IF pCmp^.Sim.DBBypass THEN
				MEMCPY(ADR(GetOutputLane),ADR(pCmp^.Sim.TestPuckData),SIZEOF(GetOutputLane));
				GetOutputLane.inRFID := pCmp^.PuckLnSw.RFID;	
				GetOutputLane.inLocation := pCmp^.Config.DBLocation;
			END_IF
			IF pCmp^.Sim.ForceRFID THEN
				GetOutputLane.inRFID := pCmp^.Sim.TestRFIDData;
			END_IF
			MEMSET(ADR(pCmp^.PuckLnSw),0,SIZEOF(pCmp^.PuckLnSw));
			pCmp^.PuckLnSw.RFID := GetOutputLane.inRFID;
			pCmp^.PuckLnSw.Location := GetOutputLane.inLocation;
			pCmp^.PuckLnSw.PrimaryLane := GetOutputLane.outPrimaryLane;
			pCmp^.PuckLnSw.SecondaryLane := GetOutputLane.outSecondaryLane;
			pCmp^.PuckLnSw.TertiaryLane := GetOutputLane.outTertiaryLane;
			pCmp^.PuckLnSw.PuckSide := GetOutputLane.outPuckSide;
			pCmp^.PuckLnSw.IsHighPriority := GetOutputLane.outIsHighPriority;
		END_IF
		
		Local.NextState := 300;
	
	300: (*Backcheck work complete*)
		
		Local.OKToStop := TRUE;
		
		IF NOT pCmp^.WorkCmp THEN
			Local.NextState := 310;
		END_IF
	
	310: (*Determine Ok to Work*)
		
		IF Local.FirstEntry THEN
			pCmp^.WorkReq := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF pCmp^.WorkCmp THEN
			Local.NextState := 320;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			pCmp^.WorkReq := FALSE;
		END_IF
	
	320: (*Confirm Data has been removed*)
		
		IF MEMCMP(ADR(pCmp^.PuckLnSw), ADR(EmptyPuckLnSw), SIZEOF(pCmp^.PuckLnSw)) = 0 THEN
			Local.NextState := 350;
		END_IF
	
	350: (*Complete Handshake With Workstop*)
		
		IF Local.FirstEntry THEN
			pWorkstop^.WorkCmp := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF NOT pWorkstop^.WorkReq THEN
			Local.NextState := 0;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			pWorkstop^.WorkCmp := FALSE;
		END_IF
	
	5000: (*Idle*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.ResetDone := FALSE;
			
			// Clear manual cycle requests here
			Local.ManualCycleDone := FALSE;
			
			// Clear subordinate *.Framework.ResetStart signals here
			pWorkstop^.Framework.ResetStart := FALSE;
			
			//Clear RFID requests
			fbRFID.ErrorClear := FALSE;
			fbRFID.ResetStart := FALSE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF NOT Local.AsynchFault OR Local.AsynchFaultReactionComplete THEN
			IF Local.CycleAuto THEN
				Local.NextState := 5001;
			ELSIF Local.CycleReset AND pCmp^.Framework.ResetStart AND
					NOT Local.CycleAuto AND NOT Local.CycleManual THEN
				IF pStn^.FullInitRequired OR pCmp^.Framework.FullInitRequired THEN
					Local.NextState := 5010;
				ELSIF NOT pStn^.FullInitRequired AND
						NOT pCmp^.Framework.FullInitRequired THEN
					IF NOT Local.AsynchFault THEN
						Local.NextState := 6000;
					ELSIF Local.AsynchFault THEN
						Local.NextState := 7500;
					END_IF
				END_IF
			ELSIF Local.CycleManual THEN
				Local.NextState := 8000;
			END_IF
		ELSIF Local.AsynchFault AND NOT Local.AsynchFaultReactionComplete THEN
			Local.NextState := 7000;
		END_IF
	
	5001: (*Set ReEntryState and working event*)
		
		IF Local.FirstEntry THEN
			Local.NextState := Local.ReEntryState;
		END_IF
		
		;
	
	5010: (*Full Initialization*)
		
		IF Local.FirstEntry THEN
			//Clear handshakes
			pCmp^.WorkReq := FALSE;
			pWorkstop^.WorkCmp := FALSE;
			memRFIDAutoResetAttempted := FALSE;
		END_IF
		
		Local.NextState := 5200;
	
	5200: (*Just start over at state 0 when back in auto*)
		
		IF Local.FirstEntry THEN
			Local.ReEntryState := 0;
			MEMSET(ADR(pCmp^.PuckLnSw),0,SIZEOF(pCmp^.PuckLnSw));
		END_IF
		
		Local.NextState := 9000;
	
	6000: (*Fautl Reset: Check Last Auto State*)
		
		Local.NextState := 5010;
	
	7000: (*Asynch fault reaction*)
		
		Local.NextState := 7499;
	
	7499: (*Asynch fault reaction complete*)
		
		IF Local.FirstEntry THEN
			Local.AsynchFaultReactionComplete := TRUE;
		END_IF
		
		Local.NextState := 5000;
	
	7500: (*Asynch fault recovery*)
		
		Local.NextState := 6000;
	
	8000: (*Manual cycle request*)
		
		Local.NextState := 9999;
	
	9000: (*Coordinated reset*)
		
		Local.NextState := 9010;
	
	9010: (*Reset Conveyor Stops*)
		
		IF Local.FirstEntry THEN
			pWorkstop^.Framework.ResetStart := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF pWorkstop^.Framework.ResetDone THEN
			IF fbRFID.Error THEN
				Local.NextState := 9020;
			ELSE
				Local.NextState := 9998;
			END_IF
		END_IF
		
		IF Local.State <> Local.NextState THEN
			pWorkstop^.Framework.ResetStart := FALSE;
		END_IF
	
	9020: (*Reset RFID*)
		
		IF Local.FirstEntry THEN
			fbRFID.ErrorClear := TRUE;
		END_IF
		
		IF NOT fbRFID.Error THEN
			Local.NextState := 9030;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbRFID.ErrorClear := FALSE;
		END_IF
	
	9030: (*Restart RFID Reader*)
		
		IF Local.FirstEntry THEN
			fbRFID.ResetStart := TRUE;
		END_IF
		
		IF fbRFID.ResetDone THEN
			Local.NextState := 9998;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbRFID.ResetStart := FALSE;
		END_IF
	
	9998: (*Reset done*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.FullInitRequired := FALSE;
			Local.FaultedState := 0;
			Local.AsynchFault := FALSE;
			Local.AsynchFaultReactionComplete := FALSE;
			pCmp^.Framework.ResetDone := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		;
	
	9999: (*Manual cycle done*)
		
		IF Local.FirstEntry THEN
			Local.ManualCycleDone := TRUE;
		END_IF
		
		;
END_CASE

//############################# END SEQUENCE LOGIC #############################

// Set Attention Bit (if needed)
Local.Attention := FALSE;

// Summation of all manual cycle requests
Local.ManualCycleRequested := FALSE;

// *************************
//   Custom Fault Logic 
// *************************
// Supply any application/component specific data to be used in building fault records or handling of asynchronous faults, etc.
IF Local.tmrFault.Q AND Local.FaultNumber = 0 THEN
	Local.FaultNumber := 1; (*default number is 1*)
END_IF
MEMSET(ADR(Local.FaultData), 0, SIZEOF(Local.FaultData));

IF Local.LongFaultState THEN
	Local.FaultTimePreset := Local.FaultTimeLong;
ELSE
	Local.FaultTimePreset := Local.FaultTimeShort;
END_IF
Local.LongFaultState := FALSE;

IF NOT Local.AsynchFault AND Local.FaultNumber = 0 THEN
	IF FALSE THEN
		Local.AsynchFault := TRUE;
		Local.FaultNumber := 1;
	END_IF
END_IF

(*#### Manual operation ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual THEN

	IF hiRFIDWriteStart THEN
		ManualRFIDWriteStart := TRUE;
	END_IF

END_IF
(*#### Manual cycle ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual AND NOT pStn^.CycleFaulted THEN
    ;
END_IF
(*#### Always turn off hi requests ####*)
hiRFIDWriteStart := FALSE;
(*### Simulation Logic ###*)


;



]]></ST>
    </Implementation>
    <Action Name="DfnMessages" Id="{fe2857cd-de91-4ce2-9d2d-f96c96a261c6}">
      <Implementation>
        <ST><![CDATA[Local.MsgArray[0].Id := 101;
Local.MsgArray[0].Text := 'RFID tag not read or has value of zero.';
Local.MsgArray[0].AltText := 'No Alt Text';
Local.MsgArray[1].Id := 111;
Local.MsgArray[1].Text := 'RFID reader reports error.';
Local.MsgArray[1].AltText := 'No Alt Text';
Local.MsgArray[2].Id := 201;
Local.MsgArray[2].Text := 'RFID reader error did not clear.';
Local.MsgArray[2].AltText := 'No Alt Text';
Local.MsgArray[3].Id := 301;
Local.MsgArray[3].Text := 'RFID reader failed to restart.';
Local.MsgArray[3].AltText := 'No Alt Text';
Local.MsgArray[4].Id := 2001;
Local.MsgArray[4].Text := 'Timed out waiting for TransactionHandler not busy';
Local.MsgArray[4].AltText := 'No Alt Text';
Local.MsgArray[5].Id := 2111;
Local.MsgArray[5].Text := 'GetOutputLane data transaction timed out.';
Local.MsgArray[5].AltText := 'No Alt Text';
Local.MsgArray[6].Id := 2121;
Local.MsgArray[6].Text := 'DBServer error during GetOutputLane transaction.';
Local.MsgArray[6].AltText := 'No Alt Text';
Local.MsgArray[7].Id := 2131;
Local.MsgArray[7].Text := 'GetOutputLane transaction did not return success';
Local.MsgArray[7].AltText := 'No Alt Text';
Local.MsgArray[8].Id := 3001;
Local.MsgArray[8].Text := '3 Lane Switch Main did not backcheck work complete';
Local.MsgArray[8].AltText := 'No Alt Text';
Local.MsgArray[9].Id := 3201;
Local.MsgArray[9].Text := 'Data not removed by 3 Lane Switch Main';
Local.MsgArray[9].AltText := 'No Alt Text';
Local.MsgArray[10].Id := 90201;
Local.MsgArray[10].Text := 'RFID reader error did not clear.';
Local.MsgArray[10].AltText := 'No Alt Text';
Local.MsgArray[11].Id := 90301;
Local.MsgArray[11].Text := 'RFID reader failed to restart.';
Local.MsgArray[11].AltText := 'No Alt Text';
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_WorkStopMainLnSw">
      <LineId Id="3" Count="470" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkStopMainLnSw.DfnMessages">
      <LineId Id="2" Count="35" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>