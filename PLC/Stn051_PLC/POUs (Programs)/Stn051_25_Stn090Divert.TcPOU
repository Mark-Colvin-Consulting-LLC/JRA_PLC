<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Stn051_25_Stn090Divert" Id="{b59de6e5-02af-4531-95b7-92292cc6c1cd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Stn051_25_Stn090Divert
VAR
	fbTC: FB_Stn090DivertTC;
//correct
	{attribute 'TcLinkToOSO' := '.iPuckPresent :=  <0,1,0>TIIB[N23S00 (AL1332)]^N23S01 (AL2341)^TxPDO^input byte 1;
		.iMainBufferFull  :=  <0,1,0>TIIB[N23S00 (AL1332)]^N23S01 (AL2341)^TxPDO^input byte 3;
	 	.iDivertMain :=  <0,1,1>TIIB[N23S00 (AL1332)]^N23S01 (AL2341)^TxPDO^input byte 3;
		.iDivertSpur :=  <0,1,1>TIIB[N23S00 (AL1332)]^N23S01 (AL2341)^TxPDO^input byte 1;
		.oDivertMain  :=  <0,1,2>TIIB[N24S00 (AL1332)]^N24S02 (EX260)^RxPDO^output byte 0;
		.oDivertSpur :=  <0,1,3>TIIB[N24S00 (AL1332)]^N24S02 (EX260)^RxPDO^output byte 0;
		.oStopLower :=  <0,1,0>TIIB[N24S00 (AL1332)]^N24S02 (EX260)^RxPDO^output byte 0'}
	{attribute 'TcLinkTo' := '.fbRFID.iRawArray[0] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 0;
		.fbRFID.iRawArray[1] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 1;
		.fbRFID.iRawArray[2] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 2;
		.fbRFID.iRawArray[3] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 3;
		 .fbRFID.iRawArray[4] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 4;
		 .fbRFID.iRawArray[5] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 5;
		 .fbRFID.iRawArray[6] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 6;
		 .fbRFID.iRawArray[7] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 7;
		 .fbRFID.iRawArray[8] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 8;
		 .fbRFID.iRawArray[9] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 9;
		 .fbRFID.iRawArray[10] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 10;
		 .fbRFID.iRawArray[11] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 11;
		 .fbRFID.iRawArray[12] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 12;
		 .fbRFID.iRawArray[13] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 13;
		 .fbRFID.iRawArray[14] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 14;
		 .fbRFID.iRawArray[15] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 15;
		 .fbRFID.iRawArray[16] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 16;
		 .fbRFID.iRawArray[17] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 17;
		 .fbRFID.iRawArray[18] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 18;
		 .fbRFID.iRawArray[19] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 19;
		 .fbRFID.iRawArray[20] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 20;
		 .fbRFID.iRawArray[21] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 21;
		 .fbRFID.iRawArray[22] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 22;
		 .fbRFID.iRawArray[23] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 23;
		 .fbRFID.iRawArray[24] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 24;
		 .fbRFID.iRawArray[25] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 25;
		 .fbRFID.iRawArray[26] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 26;
		 .fbRFID.iRawArray[27] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 27;
		 .fbRFID.iRawArray[28] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 28;
		 .fbRFID.iRawArray[29] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 29;
		 .fbRFID.iRawArray[30] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 30;
		 .fbRFID.iRawArray[31] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^TxPDO^input byte 31;
		 .fbRFID.oRawArray[0] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 0;
		 .fbRFID.oRawArray[1] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 1;
		 .fbRFID.oRawArray[2] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 2;
		 .fbRFID.oRawArray[3] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 3;
		 .fbRFID.oRawArray[4] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 4;
		 .fbRFID.oRawArray[5] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 5;
		 .fbRFID.oRawArray[6] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 6;
		 .fbRFID.oRawArray[7] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 7;
		 .fbRFID.oRawArray[8] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 8;
		 .fbRFID.oRawArray[9] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 9;
		 .fbRFID.oRawArray[10] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 10;
		 .fbRFID.oRawArray[11] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 11;
		 .fbRFID.oRawArray[12] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 12;
		 .fbRFID.oRawArray[13] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 13;
		 .fbRFID.oRawArray[14] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 14;
		 .fbRFID.oRawArray[15] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 15;
		 .fbRFID.oRawArray[16] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 16;
		 .fbRFID.oRawArray[17] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 17;
		 .fbRFID.oRawArray[18] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 18;
		 .fbRFID.oRawArray[19] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 19;
		 .fbRFID.oRawArray[20] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 20;
		 .fbRFID.oRawArray[21] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 21;
		 .fbRFID.oRawArray[22] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 22;
		 .fbRFID.oRawArray[23] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 23;
		 .fbRFID.oRawArray[24] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 24;
		 .fbRFID.oRawArray[25] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 25;
		 .fbRFID.oRawArray[26] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 26;
		 .fbRFID.oRawArray[27] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 27;
		 .fbRFID.oRawArray[28] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 28;
		 .fbRFID.oRawArray[29] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 29;
		 .fbRFID.oRawArray[30] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 30;
		 .fbRFID.oRawArray[31] := TIIB[N23S00 (AL1332)]^N23S07 (DTI425)^RxPDO^output byte 31'}
	fbConvDivert: FB_ConvDivertPuck;
	
	Debug_config_IsCRTC1: BOOL := 0;
	Debug_config_IsPilot: BOOL := 1;
	
	Debug_InBypassThisStn: BOOL := 0;
	Debug_InBypassDownstreamStn: BOOL := 0;
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Mappings to/from remote stations
gStn051_25_Stn090Divert.MainHeartbeatOK := TRUE; // because this PLC is Main
gStn051_25_Stn090Divert.MainConvRunning :=  gConsumed_SafetyInterfaceConv.MtrRunning.Enc053Mtr04;
gStn051_25_Stn090Divert.MainInAuto := gStn051.CycleAuto;

gStn051_25_Stn090Divert.SpurHeartbeatOK := gConsumed_Stn090To051_OK;
gStn051_25_Stn090Divert.SpurConvRunning := gConsumed_Stn090To051.SpurConvRunning AND gStn051_25_Stn090Divert.SpurHeartbeatOK ;
gStn051_25_Stn090Divert.SpurInAuto := gConsumed_Stn090To051.StationInAuto AND gStn051_25_Stn090Divert.SpurHeartbeatOK ;
gStn051_25_Stn090Divert.SpurBufferFull := gConsumed_Stn090To051.DivertSpurDSBufferFull;


// Configs for divert traffic control
fbTC.DivertOnlyExceptions := gConsumed_Stn090To051.ScratchPad[0].0;
fbTC.config_IsCRTC1 := Debug_config_IsCRTC1;
fbTC.config_IsPilot := Debug_config_IsPilot;
fbTC.config_IsFirstRecevingInPair := FALSE;
fbTC.config_SpurNOKThrottleTime_Pilot := T#7S;  // TODO RCC: remove when debug bit removed inside TC code. Note only applies if debug bit on


//TODO RCC - Eventually populate station bypass inputs to TC
// Call to traffic control function block.
fbTC(
	pCmp := ADR(gStn051_25_Stn090Divert),
	InBypassThisStn := Debug_InBypassThisStn,
	InBypassDownstreamStn := Debug_InBypassDownstreamStn
);

// Call to divert component logic instance.
fbConvDivert(
	pStn := ADR(gStn051),
	pCmp := ADR(gStn051_25_Stn090Divert),
	pStateTraceBuffer := ADR(gStn051_StateTraceBuffer),
	pStateTraceFifo := ADR(gStn051_StateTraceFifo),
	pStats := ADR(gStn051_02_Stats));]]></ST>
    </Implementation>
    <LineIds Name="Stn051_25_Stn090Divert">
      <LineId Id="88" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="91" Count="4" />
      <LineId Id="97" Count="24" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>