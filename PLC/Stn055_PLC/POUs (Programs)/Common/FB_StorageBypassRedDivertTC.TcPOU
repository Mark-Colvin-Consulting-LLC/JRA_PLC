<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_StorageBypassRedDivertTC" Id="{9e03d628-8b90-48ed-995f-da79ab3d427b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StorageBypassRedDivertTC
VAR_INPUT
	
	pCmp: POINTER TO CmpConvDivert;

END_VAR

VAR
	
	MainRunning: BOOL;
	SpurRunning: BOOL;
	
	onsPuckReady: R_TRIG;
	ResolvedDBStatusRouteGreen: cResolvedDBStatusRoute;
	ResolvedDBStatusRouteRed: cResolvedDBStatusRoute;
	ResolvedDBStatusRouteBlue: cResolvedDBStatusRoute;
	DBRouteToMain: BOOL;
	RouteToSpur: BOOL;
	
	
	tmrSpurNotOKToReceive: TON;
	
	Debug_DivertAllToMain: BOOL;
	Debug_DivertAllToSpur: BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Traffic control for specific dirvert - Stn060
// 
// Currently each divert has independent/unique function block as it is expected that they will
//   eventually need to be tweeked for specific application

// Sum of main/spur running conditions... don't release if not running
MainRunning :=
	pCmp^.MainHeartbeatOK AND
	pCmp^.MainConvRunning;

SpurRunning :=
	pCmp^.SpurHeartbeatOK AND
	pCmp^.SpurConvRunning;


// On rising edege of puck ready interperate the puck/device data to see if it should be diverted to spur
onsPuckReady(CLK:=pCmp^.PuckReady);
IF onsPuckReady.Q THEN 	
	// Call function to turn DB puck/device status/route into single readable resolution
	ResolvedDBStatusRouteGreen :=
		FN_ResolveDBStatusRoutePuck(
			Puck := pCmp^.Puck,
			RouteToWork := cDBDetailRoute.TrayLoadGreen);
	ResolvedDBStatusRouteRed :=
		FN_ResolveDBStatusRoutePuck(
			Puck := pCmp^.Puck,
			RouteToWork := cDBDetailRoute.TrayLoadRed);
	ResolvedDBStatusRouteBlue :=
		FN_ResolveDBStatusRoutePuck(
			Puck := pCmp^.Puck,
			RouteToWork := cDBDetailRoute.TrayLoadBlue);
		
	// Use DB route and other possible line status to determine if puck should go to spur
	// This station never works on an empty puck.
	
	DBRouteToMain := 
		(ResolvedDBStatusRouteGreen = cResolvedDBStatusRoute.Normal_RoutedThisStation OR 
		ResolvedDBStatusRouteRed = cResolvedDBStatusRoute.Normal_RoutedThisStation OR
		ResolvedDBStatusRouteBlue = cResolvedDBStatusRoute.Normal_RoutedThisStation);
	
END_IF

RouteToSpur := NOT DBRouteToMain;
	
// Run timer for spur not ok to receive
// TODO - RCC: Eventualy include upstream buffer full before forcing release
tmrSpurNotOKToReceive(
		IN:= NOT SpurRunning OR NOT pCmp^.senSpurBufferFullOff,
		PT:= T#1000MS);
		
// Release main if that is DB route or if spur not ready in time
//  and a few other misc conditions.
//if main BF, release ALL to spur.

//pCmp^.MainBufferFull := NOT pCmp^.senMainBufferFullOff;

pCmp^.PuckReleaseMain := 
	pCmp^.PuckReady AND
	MainRunning AND
	(DBRouteToMain OR
//	tmrSpurNotOkToReceive.Q OR
	pCmp^.UnknownPuck OR
	Debug_DivertAllToMain) AND
	NOT Debug_DivertAllToSpur AND
	pCmp^.senMainBufferFullOff;

// Release to spur if that is route and it is available.
pCmp^.PuckReleaseSpur :=
	pCmp^.PuckReady AND
	MainRunning AND
	SpurRunning AND
	((RouteToSpur AND
	NOT pCmp^.UnknownPuck) OR
	Debug_DivertAllToSpur) AND
	NOT Debug_DivertAllToMain OR
	NOT pCmp^.senMainBufferFullOff;
	
]]></ST>
    </Implementation>
    <LineIds Name="FB_StorageBypassRedDivertTC">
      <LineId Id="105" Count="34" />
      <LineId Id="204" Count="3" />
      <LineId Id="145" Count="12" />
      <LineId Id="234" Count="2" />
      <LineId Id="158" Count="7" />
      <LineId Id="238" Count="0" />
      <LineId Id="166" Count="9" />
      <LineId Id="239" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>