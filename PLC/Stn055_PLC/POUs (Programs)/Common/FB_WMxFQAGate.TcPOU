<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_WMxFQAGate" Id="{9b9604ee-871e-474c-8a5b-20ff3745507b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WMxFQAGate
VAR_INPUT
	pStn: POINTER TO Station;
	pCmp: POINTER TO CmpWmxFQAGate;
	pWorkStop: POINTER TO CmpConvStop;
	pStateTraceBuffer: POINTER TO TraceFIFOBuffer;
	pStateTraceFIFO: POINTER TO FIFO_StateTrace;
	pStats: POINTER TO Component_Stats;
END_VAR
VAR
	Local: FrameworkLocal;
	Framework: FB_Framework;
	pTransactionHandler: POINTER TO FB_DBTransactionHandler;
	fbScanner: FB_KeyenceSRScanner_DRV;
	CodeData: STRING(MAX_STRING_LENGTH);
	ScannerReset: BOOL;
	ScannerScan: BOOL;
	CodeTerminator: STRING(3);
	TriggerFQA: DBTriggerFQA;
	Scanner: DeviceLabel;
	Debug_SkipFqaRead: BOOL;
	Debug_FQASkipHandhake: BOOL := TRUE;
	hiScanDeviceLabel: BOOL;
	hiScannerReset: BOOL;
	// Temporarily double linked for testing. This will go away
	iPuckPresent AT %I*: BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Local.pStateTraceBuffer := pStateTraceBuffer;
Local.pStateTraceFifo := pStateTraceFifo;
Local.pStats := pStats;

IF gFirstScan THEN
	// Version 09 - 07/09/2022 - Clear scanner bits on full init, etc.
	
	Local.FaultTimeLong := T#6000ms;
	Local.FaultTimeShort := T#2000ms;
	Local.Name := pCmp^.Framework.ComponentIDRecord.Name;
	Local.AltName := '';
	
	pTransactionHandler := gDBServer.GetTransactionHandler();
	
	CodeTerminator := ':';
	DfnMessages();
END_IF

FrameWork(pFramework:=ADR(pCmp^.Framework), pLocal:=ADR(Local), pStation:=pStn);

(* Housekeeping *)

// Keyence camera settings and call
fbScanner.PLCFirstScan := gFirstScan;
fbScanner.ReadTimeOut := T#125ms;
fbScanner.TryCountLimit := 2;
fbScanner.ProfinetScanRate := T#8ms;
fbScanner(Data:=CodeData);

// Populate various status bits use for external traffic control puposes
pCmp^.StatusInCycleAuto := Local.CycleAuto AND (NOT pStn^.StopRequest OR pCmp^.Framework.EnableFreeRun);

// Pass through external free run stop request to local then clear it
Local.hiFreeRunCycleStop := pCmp^.FreeRunCycleStop;
pCmp^.FreeRunCycleStop := FALSE;

(* #################
    Sequence Logic
   #################*)
CASE Local.State OF
	
	0: (*Wait for action*)
		
		(*Only believe work request if either the workstop indicates it is in auto in freerun or
		if both we and workstop are both not in free run modein which case we trust we are reset together and both following station cycle auto together.*);
		
		Local.OKToStop := TRUE;
		
		IF pWorkStop^.WorkReq AND
				(NOT pStn^.StopRequest OR
				pCmp^.Framework.CycleAutoFreeRunnning) AND
				(pWorkstop^.Framework.CycleAutoFreeRunnning OR 
				(NOT pWorkstop^.Framework.EnableFreeRun AND
				NOT pCmp^.Framework.EnableFreeRun)) OR
				pWorkStop^.StatusPuckPresent THEN

			Local.NextState := 10;
		END_IF
	
	10: (*Check for debug bypass read*)
		
		IF Debug_SkipFqaRead THEN
			Local.NextState := 300;
		ELSE
			Local.NextState := 100;
		END_IF
	
	100: (*Trigger a code scan*)
		
		IF Local.FirstEntry THEN
			fbScanner.Start := TRUE;
		END_IF
		
		Local.LongFaultState := TRUE;
		
		IF fbScanner.Done THEN
			Local.NextState := 150;
		ELSIF fbScanner.Fail THEN
			Local.NextState := 300;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbScanner.Start := FALSE;
		END_IF
	
	150: (*Parse barcode data*)
		
		IF Local.FirstEntry THEN
			CodeData := LEFT(CodeData , (FIND(CodeData, CodeTerminator) - 1));
			Scanner := FN_DeviceLabelParse(CodeData);
		END_IF
		
		IF FIND(Scanner.SN, Scanner.cERROR) = 0 THEN
			Local.NextState := 200;
		ELSE
			Local.NextState := 151;
		END_IF
	
	151: (*Fault: Barcode error*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	200: (*Verify TransactionHandler Not Busy*)
		
		IF NOT pTransactionHandler^.Busy AND
				NOT pTransactionHandler^.Done AND
				NOT pTransactionHandler^.Error THEN
			Local.NextState := 210;
		END_IF
	
	210: (*TriggerFQA*)
		
		IF Local.FirstEntry THEN
			MEMSET(ADR(TriggerFQA),0,SIZEOF(TriggerFQA));
			TriggerFQA.inSN := Scanner.SN;
			TriggerFQA.inLocation :=pCmp^.Config.DBLocation;
		END_IF
		
		Local.LongFaultState := TRUE;
		pTransactionHandler^.ExecuteSP(
		  bForeground := TRUE,
		  sSPName := 'uspTriggerFQA',
		  pData := ADR(TriggerFQA),
		  nDataSize :=SIZEOF(TriggerFQA));
		
		IF pTransactionHandler^.Done THEN
			IF NOT pTransactionHandler^.Error THEN
				IF TriggerFQA.outReturnCode =
						cDBReturnCode.Success THEN
					Local.NextState := 300;
				ELSE
					Local.NextState := 212;
				END_IF
			ELSE
				Local.NextState := 211;
			END_IF
		END_IF
	
	211: (*Fault: DBServer Reported Error*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	212: (*Fault: TriggerFQA transaction failed*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	300: (*Finish handshake*)
		
		Local.StateTimePreset := T#2000ms;
		
		(*Allow for possibility that free running workstop is not able to drop handshake if it is out of cycle while
		we ourselves, also free running may still be here in cycle waiting.
		Just go back to zero, it will not hurt to do FQA again for a given device.*);
		
		IF Local.FirstEntry THEN
			// Temporarily deactivated for testing
			// pWorkStop^.WorkCmp := TRUE;
		END_IF
		
		IF Debug_FQASkipHandhake THEN
				Local.OKToStop := TRUE;
				
		END_IF
		//Temporary code for simulation below
		IF NOT pWorkStop^.StatusPuckPresent OR
			Local.tmrState.Q THEN
			Local.NextState := 0;
		END_IF
		
		(* Real code below
		IF NOT pWorkStop^.WorkReq OR
				(pWorkstop^.Framework.EnableFreeRun AND
				NOT pWorkstop^.Framework.CycleAutoFreeRunnning OR) THEN
			Local.NextState := 0;
		END_IF
		*)
		
		IF Local.State <> Local.NextState THEN
			// temporarily disabled for testing
			// pWorkStop^.WorkCmp := FALSE;
		END_IF
	
	5000: (*Idle*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.ResetDone := FALSE;
			
			// Special case if workstop is free running then drop complete to prevent it from backcheck fault.
			IF pWorkstop^.Framework.EnableFreeRun THEN
				// Temporarily deactivated for testing
				// pWorkStop^.WorkCmp := FALSE;
			END_IF
			
			// Clear manual cycle requests here
			Local.ManualCycleDone := FALSE;
			
			// Clear subordinate *.Framework.ResetStart signals here 
			// In this case workstop is reset directly by StnMain
			
			fbScanner.Start := FALSE;
			fbScanner.ErrorClear := FALSE;
			fbScanner.ResetStart := FALSE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF NOT Local.AsynchFault OR Local.AsynchFaultReactionComplete THEN
			IF Local.CycleAuto THEN
				Local.NextState := 5001;
			ELSIF Local.CycleReset AND pCmp^.Framework.ResetStart AND
					NOT Local.CycleAuto AND NOT Local.CycleManual THEN
				IF pStn^.FullInitRequired OR pCmp^.Framework.FullInitRequired THEN
					Local.NextState := 5010;
				ELSIF NOT pStn^.FullInitRequired AND
						NOT pCmp^.Framework.FullInitRequired THEN
					IF NOT Local.AsynchFault THEN
						Local.NextState := 6000;
					ELSIF Local.AsynchFault THEN
						Local.NextState := 7500;
					END_IF
				END_IF
			ELSIF Local.CycleManual THEN
				Local.NextState := 8000;
			END_IF
		ELSIF Local.AsynchFault AND NOT Local.AsynchFaultReactionComplete THEN
			Local.NextState := 7000;
		END_IF
	
	5001: (*Set ReEntryState and working event*)
		
		IF Local.FirstEntry THEN
			Local.NextState := Local.ReEntryState;
		END_IF
		
		;
	
	5010: (*Full Initialization*)
		
		IF Local.FirstEntry THEN
			// temporarily deactivated for testing
			// pWorkStop^.WorkCmp := FALSE;
			
			Local.ReEntryState := 0;
			
			fbScanner.Start := FALSE;
			fbScanner.ErrorClear := FALSE;
			fbScanner.ResetStart := FALSE;
		END_IF
		
		Local.NextState := 9000;
	
	6000: (*Fault reset - check LastAutoState*)
		
		IF Local.FirstEntry THEN
			Local.ReEntryState := 0;
		END_IF
		
		Local.NextState := 5010;
	
	7000: (*Asynch fault reaction*)
		
		Local.NextState := 7499;
	
	7499: (*Asynch fault reaction complete*)
		
		IF Local.FirstEntry THEN
			Local.AsynchFaultReactionComplete := TRUE;
		END_IF
		
		Local.NextState := 5000;
	
	7500: (*Asynch fault recovery*)
		
		Local.NextState := 6000;
	
	8000: (*Manual cycle request*)
		
		Local.NextState := 9999;
	
	9000: (*Coordinated reset start: Check for scanner error*)
		
		IF fbScanner.Error THEN
			Local.NextState := 9010;
		ELSE
			Local.NextState := 9020;
		END_IF
	
	9010: (*Reset Scanner*)
		
		IF Local.FirstEntry THEN
			Local.StateTimePreset := T#500ms;
			fbScanner.ErrorClear := TRUE;
		END_IF
		
		IF Local.tmrState.Q THEN
			Local.NextState := 9011;
		ELSIF NOT fbScanner.Error THEN
			Local.NextState := 9020;
		END_IF
	
	9011: (*Fault: Reader Error*)
		
		IF Local.FirstEntry THEN
			Local.FaultNumber := 1;
		END_IF
		
		;
	
	9020: (*Reset Camera*)
		
		IF Local.FirstEntry THEN
			fbScanner.ResetStart := TRUE;
			fbScanner.Start := FALSE;
			fbScanner.ErrorClear := FALSE;
		END_IF
		
		IF fbScanner.ResetDone THEN
			Local.NextState := 9100;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			fbScanner.ResetStart := FALSE;
		END_IF
	
	9100: (*No other components to reset*)
		
		IF Local.FirstEntry THEN
			// Note that workstop (Corner 3 in this case) is reset directly by StnMain
			//    This is both because it is a simple component AND becuase we are using it in free run mode.
		END_IF
		
		Local.NextState := 9998;
	
	9998: (*Reset done*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.FullInitRequired := FALSE;
			Local.FaultedState := 0;
			Local.AsynchFault := FALSE;
			Local.AsynchFaultReactionComplete := FALSE;
			pCmp^.Framework.ResetDone := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		;
	
	9999: (*Manual cycle done*)
		
		IF Local.FirstEntry THEN
			Local.ManualCycleDone := TRUE;
		END_IF
		
		;
END_CASE

//############################# END SEQUENCE LOGIC #############################

// Set Attention Bit (if needed)
Local.Attention := FALSE;

// Summation of all manual cycle requests
Local.ManualCycleRequested := FALSE;

// *************************
//   Custom Fault Logic 
// *************************
// Supply any application/component specific data to be used in building fault records or handling of asynchronous faults, etc.
IF Local.tmrFault.Q AND Local.FaultNumber = 0 THEN
	Local.FaultNumber := 1; (*default number is 1*)
END_IF
MEMSET(ADR(Local.FaultData), 0, SIZEOF(Local.FaultData));

IF Local.LongFaultState THEN
	Local.FaultTimePreset := Local.FaultTimeLong;
ELSE
	Local.FaultTimePreset := Local.FaultTimeShort;
END_IF
Local.LongFaultState := FALSE;

IF NOT Local.AsynchFault AND Local.FaultNumber = 0 THEN
	IF FALSE THEN
		Local.AsynchFault := TRUE;
		Local.FaultNumber := 1;
	END_IF
END_IF
(*#### Manual operation ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual THEN

	IF hiScanDeviceLabel THEN
		ScannerScan := TRUE;
		fbScanner.Start := TRUE;
	END_IF
	IF ScannerScan AND (
			fbScanner.Done OR
			fbScanner.Fail) THEN
		ScannerScan := FALSE;
		fbScanner.Start := FALSE;
	END_IF

	IF hiScannerReset THEN
		ScannerReset:= TRUE;
		fbScanner.ErrorClear := TRUE;
	END_IF
	IF ScannerReset AND NOT fbScanner.Error THEN
		fbScanner.ErrorClear := FALSE;		
		fbScanner.ResetStart := TRUE;
	END_IF
	IF ScannerReset AND fbScanner.ResetDone THEN
		fbScanner.ResetStart := FALSE;
		ScannerReset:= FALSE;
	END_IF

END_IF

(*#### Manual cycle ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual AND NOT pStn^.CycleFaulted THEN
    ;
END_IF

(*#### Always turn off hi requests ####*)

hiScanDeviceLabel := FALSE;
hiScannerReset := FALSE;
(*### Simulation Logic ###*)


;



]]></ST>
    </Implementation>
    <Action Name="DfnMessages" Id="{9d7b536f-31fc-4de4-8d59-c32fbf0edf03}">
      <Implementation>
        <ST><![CDATA[Local.MsgArray[0].Id := 1001;
Local.MsgArray[0].Text := 'Did not receive feedback from code scanner.';
Local.MsgArray[0].AltText := 'No Alt Text';
Local.MsgArray[1].Id := 1501;
Local.MsgArray[1].Text := 'Scanner data does not match data from DB';
Local.MsgArray[1].AltText := 'No Alt Text';
Local.MsgArray[2].Id := 1511;
Local.MsgArray[2].Text := 'Sensor found error in barcode.';
Local.MsgArray[2].AltText := 'No Alt Text';
Local.MsgArray[3].Id := 2101;
Local.MsgArray[3].Text := 'PickDeviceFromTray transaction timed out.';
Local.MsgArray[3].AltText := 'No Alt Text';
Local.MsgArray[4].Id := 2111;
Local.MsgArray[4].Text := 'DBServer error during TriggerFQA transaction';
Local.MsgArray[4].AltText := 'No Alt Text';
Local.MsgArray[5].Id := 2121;
Local.MsgArray[5].Text := 'TriggerFQA transaction failed';
Local.MsgArray[5].AltText := 'No Alt Text';
Local.MsgArray[6].Id := 3001;
Local.MsgArray[6].Text := 'Work request handshake did not reset';
Local.MsgArray[6].AltText := 'No Alt Text';
Local.MsgArray[7].Id := 90111;
Local.MsgArray[7].Text := 'Reader failed to clear error';
Local.MsgArray[7].AltText := 'No Alt Text';
Local.MsgArray[8].Id := 90201;
Local.MsgArray[8].Text := 'Timeout during camera reset';
Local.MsgArray[8].AltText := 'No Alt Text';
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_WMxFQAGate">
      <LineId Id="3" Count="53" />
      <LineId Id="468" Count="0" />
      <LineId Id="58" Count="102" />
      <LineId Id="532" Count="33" />
      <LineId Id="181" Count="250" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WMxFQAGate.DfnMessages">
      <LineId Id="2" Count="26" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>