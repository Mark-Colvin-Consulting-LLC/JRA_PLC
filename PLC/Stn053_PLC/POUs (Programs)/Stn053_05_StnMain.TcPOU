<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Stn053_05_StnMain" Id="{c5181a19-3968-4590-8965-0d4dbfa856db}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Stn053_05_StnMain
VAR
	
	pStn: POINTER TO Station;
	pCmp: POINTER TO CmpCore;
	Local: FrameworkLocal;
	Framework: FB_Framework;
	
	pEvalLnSwPrestopMainGrn : POINTER TO CmpWorkStopMainLnSw;
	pEvalLnSwPrestopMainRed : POINTER TO CmpWorkStopMainLnSw;
	pEvalLnSwPrestopMainBlu : POINTER TO CmpWorkStopMainLnSw;
	pEvalLnSw			: POINTER TO  Cmp3LaneSwitchMain;
	pGrnRedRecircMergeMainPrestop	: POINTER TO  CmpConvStop;
	pGrnRedRecircMergeSpurPrestop	: POINTER TO  CmpConvStop;
	pEvalBreakStopsRed	: POINTER TO  CmpConvBreakStopGroup;
	pEvalBreakStopsBlu 	: POINTER TO  CmpConvBreakStopGroup;
	pGrnRedRecircMerge : POINTER TO  CmpConvMerge;
	pEmptyPuckStorageDivertRed	: POINTER TO  CmpConvDivert;
	pEmptyPuckStorageBreakStop1Red	: POINTER TO  CmpConvStop;
	pEmptyPuckStorageBreakStop2Red : POINTER TO  CmpConvStop;
	pEmptyPuckStorageMainMergePrestopRed : POINTER TO  CmpConvStop;
	pEmptyPuckStorageSpurMergePrestopRed : POINTER TO  CmpConvStop;
	pEmptyPuckStorageMergeRed 			: POINTER TO  CmpConvMerge;
	pStn211Divert			:  POINTER TO CmpConvDivert;
	pStn211MergePrestop 	:  POINTER TO CmpConvStop;
	pStn211Merge			: POINTER TO  CmpConvMerge;
	pBufferRecircEntryDivertRed			: POINTER TO  CmpConvDivert;
	pBufferRecircMainMergePrestopRed 	:  POINTER TO CmpConvStop;
	pBufferRecircSpurMergePrestopRed 	:  POINTER TO CmpConvStop;
	pBufferRecircMergeRed			:  POINTER TO CmpConvMerge;
	pCleaningRecircExitDivertRed			:  POINTER TO CmpConvDivert;
	pCleaningRecircExitMainMergePrestopRed	:  POINTER TO CmpConvStop;
	pCleaningRecircExitSpurMergePrestopRed :  POINTER TO CmpConvStop;
	pCleaningRecircExitMergeRed			:  POINTER TO CmpConvMerge;
	pStn221Divert			:  POINTER TO CmpConvDivert;
	pStn221MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn221Merge			:  POINTER TO CmpConvMerge;
	pStn222Divert			:  POINTER TO CmpConvDivert;
	pStn222MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn222Merge			:  POINTER TO CmpConvMerge;
	pStn231Divert :  POINTER TO CmpConvDivert;
	pStn231MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn231Merge	:  POINTER TO CmpConvMerge;
	pStn232Divert		:  POINTER TO CmpConvDivert;
	pStn232MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn232Merge	:  POINTER TO CmpConvMerge;
	pGradingRecircEntryDivertRed 	: POINTER TO  CmpConvDivert;
	pTestRecircExitMainMergePrestopRed	:  POINTER TO CmpConvStop;
	pTestRecircExitSpurMergePrestopRed	:  POINTER TO CmpConvStop;
	pTestRecircExitMergeRed	:  POINTER TO CmpConvMerge;
	pStn241Divert	:  POINTER TO CmpConvDivert;
	pStn241MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn241Merge	:  POINTER TO CmpConvMerge;
	pStn251Divert	:  POINTER TO CmpConvDivert;
	pStn251MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn251Merge	:  POINTER TO CmpConvMerge;
	pStn252Divert	:  POINTER TO CmpConvDivert;
	pStn252MainMergePrestop	:  POINTER TO CmpConvStop;
	pStn252Merge	:  POINTER TO CmpConvMerge;
	pTestRecircEntryDivertRed	:  POINTER TO CmpConvDivert;
	pEvalRecircBreakStopsRed	:  POINTER TO CmpConvStop;
	pReceivingBypassExitMergeMainPrestopBlu	:  POINTER TO CmpConvStop;
	pReceivingBypassExitMergeBlu	:  POINTER TO CmpConvMerge;
	
	onsNotFirstScan: R_TRIG;
(*
	hiStopCartonConv: BOOL;
	hiStartCartonConv: BOOL;
	hiStopAllComponents: BOOL;
*)	
	
	// Outputs that are on VB controlled primarily by Stn53 but has a few outputs that are owned by Stn52 based on station boundries.
	// These are primarily "upstream" of the Stn53 three lane switch
	{attribute 'TcLinkToOSO' := '<0,1,0>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopReceivingGrn31 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopReceivingGrn32 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,2>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopReceivingGrn33 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,0>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 1'}
	oStopLowerBreakStopReceivingRed31 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 1'}
	oStopLowerBreakStopReceivingRed32 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,2>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 1'}
	oStopLowerBreakStopReceivingRed33 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,0>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 2'}
	oStopLowerBreakStopReceivingBlu32 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 2'}
	oStopLowerBreakStopReceivingBlu33 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,2>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 2'}
	oStopLowerBreakStopReceivingBlu34 AT %Q*: BOOL;

	
	
	// Outputs that are on VB controlled primarily by Stn53 but has a few outputs that are owned by Stn54 based on station boundries.
	// These are primarily "downstream" of the Stn53 three lane switch
	
	// EvalBreakStopsGrn 02 (4A) VB9
	{attribute 'TcLinkToOSO' := '<0,1,6>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn02 AT %Q*: BOOL;	
	
	// EvalBreakStopsGrn 03 (4B) VB9
	{attribute 'TcLinkToOSO' := '<0,1,7>TIIB[N32S00 (AL1332)]^N32S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn03 AT %Q*: BOOL;
	
	//MergeRedtoGrnMergeMainPrestopGrn  (1A)  VB10
	{attribute 'TcLinkToOSO' := '<0,1,0>TIIB[N46S00 (AL1332)]^N46S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerRedGrnRecircMergePrestopGrn AT %Q*: BOOL;

	//MergeRedtoGrnMergeSpurPrestopRed  (9B) VB10	
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N46S00 (AL1332)]^N46S02 (EX260)^RxPDO^output byte 2'}
	oStopLowerRedGrnRecircMergePrestopRed AT %Q*: BOOL;

	// EvalBreakStopsGrn 04 (1B) VB10
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N46S00 (AL1332)]^N46S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn04 AT %Q*: BOOL;
			

	// Note that breaak stop eval green 22-25 are on valve bank controlled by stn 51 so look for remote outputs there.
	{attribute 'TcLinkToOSO' := '<0,1,0>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn26 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,1>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn27 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,2>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn28 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,3>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn29 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,4>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn30 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,5>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn31 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,6>TIIB[N61S00 (AL1332)]^N61S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalGrn32 AT %Q*: BOOL;
	{attribute 'TcLinkToOSO' := '<0,1,2>TIIB[N46S00 (AL1332)]^N46S02 (EX260)^RxPDO^output byte 0'}
	oStopLowerBreakStopEvalRecircGrn27 AT %Q*: BOOL;

	
	ForceBootUpdate: BOOL := FALSE;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// This is a "do nothing" main but does respond to reset start from station mode control.
//  Will allow station to be reset and put into cycle until real statoin main is integrated.

pStn := ADR(gStn053);
pCmp := ADR(gStn053_05_StnMain);

pEvalLnSwPrestopMainGrn 			:= ADR(gStn053_11_EvalLnSwPrestopMainGrn);
pEvalLnSwPrestopMainRed 			:= ADR(gStn053_13_EvalLnSwPrestopMainRed);
pEvalLnSwPrestopMainBlu				:= ADR(gStn053_15_EvalLnSwPrestopMainBlu);
pEvalLnSw		 					:= ADR(gStn053_16_EvalLnSw);
pGrnRedRecircMergeSpurPrestop 		:= ADR(gStn053_19_GrnRedRecircMergeSpurPrestop);
pGrnRedRecircMergeMainPrestop 		:= ADR(gStn053_20_GrnRedRecircMergeMainPrestop);
pEvalBreakStopsRed	 		:= ADR(gStn053_21_EvalBreakStopsRed);
pEvalBreakStopsBlu 			:= ADR(gStn053_22_EvalBreakStopsBlu);
pGrnRedRecircMerge 			:= ADR(gStn053_23_GrnRedRecircMerge);
pEmptyPuckStorageDivertRed	:= ADR(gStn053_24_EmptyPuckStorageDivertRed);
pEmptyPuckStorageBreakStop1Red			:= ADR(gStn053_25_EmptyPuckStorageBreakStop1Red);
pEmptyPuckStorageBreakStop2Red			:= ADR(gStn053_26_EmptyPuckStorageBreakStop2Red);
pEmptyPuckStorageMainMergePrestopRed	:= ADR(gStn053_27_EmptyPuckStorageMainMergePrestopRed);
pEmptyPuckStorageSpurMergePrestopRed	:= ADR(gStn053_28_EmptyPuckStorageSpurMergePrestopRed);
pEmptyPuckStorageMergeRed 	:= ADR(gStn053_29_EmptyPuckStorageMergeRed);
pStn211Divert			 	:= ADR(gStn053_30_Stn211Divert);
pStn211MergePrestop 	 	:= ADR(gStn053_31_Stn211MergePrestop);
pStn211Merge			 	:= ADR(gStn053_32_Stn211Merge);
pBufferRecircEntryDivertRed		 		:= ADR(gStn053_40_BufferRecircEntryDivertRed);
pBufferRecircMainMergePrestopRed 	 	:= ADR(gStn053_41_BufferRecircMainMergePrestopRed);
pBufferRecircSpurMergePrestopRed 	 	:= ADR(gStn053_42_BufferRecircSpurMergePrestopRed);
pBufferRecircMergeRed			 		:= ADR(gStn053_43_BufferRecircMergeRed);
pCleaningRecircExitDivertRed			:= ADR(gStn053_45_CleaningRecircExitDivertRed);
pCleaningRecircExitMainMergePrestopRed	:= ADR(gStn053_46_CleaningRecircExitMainMergePrestopRed);
pCleaningRecircExitSpurMergePrestopRed  := ADR(gStn053_47_CleaningRecircExitSpurMergePrestopRed);
pCleaningRecircExitMergeRed			 	:= ADR(gStn053_48_CleaningRecircExitMergeRed);
pStn221Divert			 	:= ADR(gStn053_50_Stn221Divert);
pStn221MainMergePrestop	 	:= ADR(gStn053_51_Stn221MainMergePrestop);
pStn221Merge			 	:= ADR(gStn053_52_Stn221Merge);
pStn222Divert			 	:= ADR(gStn053_55_Stn222Divert);
pStn222MainMergePrestop	 	:= ADR(gStn053_56_Stn222MainMergePrestop);
pStn222Merge			 	:= ADR(gStn053_57_Stn222Merge);
pStn231Divert  				:= ADR(gStn053_60_Stn231Divert);
pStn231MainMergePrestop	 	:= ADR(gStn053_61_Stn231MainMergePrestop);
pStn231Merge	 			:= ADR(gStn053_62_Stn231Merge);
pStn232Divert		 		:= ADR(gStn053_65_Stn232Divert);
pStn232MainMergePrestop	 	:= ADR(gStn053_66_Stn232MainMergePrestop);
pStn232Merge				:= ADR(gStn053_67_Stn232Merge);
pGradingRecircEntryDivertRed 	 		:= ADR(gStn053_75_GradingRecircEntryDivertRed);
pTestRecircExitMainMergePrestopRed	 	:= ADR(gStn053_76_TestRecircExitMainMergePrestopRed);
pTestRecircExitSpurMergePrestopRed	 	:= ADR(gStn053_77_TestRecircExitSpurMergePrestopRed);
pTestRecircExitMergeRed	 	:= ADR(gStn053_78_TestRecircExitMergeRed);
pStn241Divert				:= ADR(gStn053_80_Stn241Divert);
pStn241MainMergePrestop	 	:= ADR(gStn053_81_Stn241MainMergePrestop);
pStn241Merge	 			:= ADR(gStn053_82_Stn241Merge);
pStn251Divert	 			:= ADR(gStn053_88_Stn251Divert);
pStn251MainMergePrestop	 	:= ADR(gStn053_89_Stn251MainMergePrestop);
pStn251Merge				:= ADR(gStn053_90_Stn251Merge);
pStn252Divert	 			:= ADR(gStn053_91_Stn252Divert);
pStn252MainMergePrestop	 	:= ADR(gStn053_92_Stn252MainMergePrestop);
pStn252Merge	 			:= ADR(gStn053_93_Stn252Merge);
pTestRecircEntryDivertRed	:= ADR(gStn053_95_TestRecircEntryDivertRed);
pEvalRecircBreakStopsRed	:= ADR(gStn053_96_EvalRecircBreakStopsRed);
pReceivingBypassExitMergeMainPrestopBlu	:= ADR(gStn053_98_ReceivingBypassExitMergeMainPrestopBlu);
pReceivingBypassExitMergeBlu	 		:= ADR(gStn053_99_ReceivingBypassExitMergeBlu);

Local.pStateTraceBuffer := ADR(gStn053_StateTraceBuffer);
Local.pStateTraceFifo := ADR(gStn053_StateTraceFifo);
Local.pStats := ADR(gStn053_02_Stats);

IF gFirstScan THEN
	Local.FaultTimeLong := T#10000ms;
	Local.FaultTimeShort := T#6000MS;

	Local.Name := pCmp^.Framework.ComponentIDRecord.Name;
	Local.AltName := '';

	DfnMessages();
END_IF

FrameWork(pFramework:=ADR(pCmp^.Framework), pLocal:=ADR(Local), pStation:=pStn);

(* Housekeeping *)

//Call RemoteBreakStop control
RemoteBreakStop();	

(* #################
    Sequence Logic
   #################*)
CASE Local.State OF
	
	0: (*Wait for action*)
		
		Local.OKToStop := TRUE;
		
		;
	
	5000: (*Idle*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.ResetDone := FALSE;
			
			// Clear manual cycle requests here
			Local.ManualCycleDone := FALSE;
			
			// Clear subordinate *.Framework.ResetStart signals here
			pEvalLnSw^.Framework.ResetStart := FALSE;
			pGrnRedRecircMergeMainPrestop^.Framework.ResetStart := FALSE;
			pGrnRedRecircMergeSpurPrestop^.Framework.ResetStart := FALSE;
			pEvalBreakStopsRed^.Framework.ResetStart := FALSE;
			pEvalBreakStopsBlu^.Framework.ResetStart := FALSE;
			pGrnRedRecircMerge^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageDivertRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageBreakStop1Red^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageBreakStop2Red^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageMergeRed^.Framework.ResetStart := FALSE;
			pStn211Divert^.Framework.ResetStart := FALSE;
			pStn211MergePrestop^.Framework.ResetStart := FALSE;
			pStn211Merge^.Framework.ResetStart := FALSE;
			pBufferRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pBufferRecircMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pBufferRecircSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pBufferRecircMergeRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitDivertRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitMergeRed^.Framework.ResetStart := FALSE;
			pStn221Divert^.Framework.ResetStart := FALSE;
			pStn221MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn221Merge^.Framework.ResetStart := FALSE;
			pStn222Divert^.Framework.ResetStart := FALSE;
			pStn222MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn222Merge^.Framework.ResetStart := FALSE;
			pStn231Divert^.Framework.ResetStart := FALSE;
			pStn231MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn231Merge^.Framework.ResetStart := FALSE;
			pStn232Divert^.Framework.ResetStart := FALSE;
			pStn232MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn232Merge^.Framework.ResetStart := FALSE;
			pGradingRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pTestRecircExitMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pTestRecircExitSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pTestRecircExitMergeRed^.Framework.ResetStart := FALSE;
			pStn241Divert^.Framework.ResetStart := FALSE;
			pStn241MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn241Merge^.Framework.ResetStart := FALSE;
			pStn251Divert^.Framework.ResetStart := FALSE;
			pStn251MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn251Merge^.Framework.ResetStart := FALSE;
			pStn252Divert^.Framework.ResetStart := FALSE;
			pStn252MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn252Merge^.Framework.ResetStart := FALSE;
			pTestRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pEvalRecircBreakStopsRed^.Framework.ResetStart := FALSE;
			pReceivingBypassExitMergeMainPrestopBlu^.Framework.ResetStart := FALSE;
			pReceivingBypassExitMergeBlu^.Framework.ResetStart := FALSE;	
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF NOT Local.AsynchFault OR Local.AsynchFaultReactionComplete THEN
			IF Local.CycleAuto THEN
				Local.NextState := 5001;
			ELSIF Local.CycleReset AND pCmp^.Framework.ResetStart AND
					NOT Local.CycleAuto AND NOT Local.CycleManual THEN
				IF pStn^.FullInitRequired OR pCmp^.Framework.FullInitRequired THEN
					Local.NextState := 5010;
				ELSIF NOT pStn^.FullInitRequired AND
						NOT pCmp^.Framework.FullInitRequired THEN
					IF NOT Local.AsynchFault THEN
						Local.NextState := 6000;
					ELSIF Local.AsynchFault THEN
						Local.NextState := 7500;
					END_IF
				END_IF
			ELSIF Local.CycleManual THEN
				Local.NextState := 8000;
			END_IF
		ELSIF Local.AsynchFault AND NOT Local.AsynchFaultReactionComplete THEN
			Local.NextState := 7000;
		END_IF
	
	5001: (*Set ReEntryState and working event*)
		
		IF Local.FirstEntry THEN
			Local.NextState := Local.ReEntryState;
		END_IF
		
		;
	
	5010: (*Full Initialization*)
		
		IF Local.FirstEntry THEN
			Local.ReEntryState := 0;
		END_IF
		
		Local.NextState := 9000;
	
	6000: (*Fault reset - check LastAutoState*)
		
		Local.NextState := 9000;
	
	7000: (*Asynch fault reaction*)
		
		Local.NextState := 7499;
	
	7499: (*Asynch fault reaction complete*)
		
		IF Local.FirstEntry THEN
			Local.AsynchFaultReactionComplete := TRUE;
		END_IF
		
		Local.NextState := 5000;
	
	7500: (*Asynch fault recovery*)
		
		Local.NextState := 6000;
	
	8000: (*Manual cycle request*)
		
		Local.NextState := 9999;
	
	9000: (*Coordinated reset robot first*)
		
		IF Local.FirstEntry THEN
			pEvalLnSw^.Framework.ResetStart := TRUE;
			pGrnRedRecircMergeMainPrestop^.Framework.ResetStart := TRUE;
			pGrnRedRecircMergeSpurPrestop^.Framework.ResetStart := TRUE;
			pEvalBreakStopsRed^.Framework.ResetStart := TRUE;
			IF gDebug_ComponentCalls.CallStn053_22_EvalBreakStopsBlu THEN
				pEvalBreakStopsBlu^.Framework.ResetStart := TRUE;
			END_IF
			pGrnRedRecircMerge^.Framework.ResetStart := TRUE;
			pEmptyPuckStorageDivertRed^.Framework.ResetStart := TRUE;
			IF gDebug_ComponentCalls.CallStn053_25_EmptyPuckStorageBreakStop1Red THEN
				pEmptyPuckStorageBreakStop1Red^.Framework.ResetStart := TRUE;
			END_IF
			IF gDebug_ComponentCalls.CallStn053_26_EmptyPuckStorageBreakStop2Red THEN
				pEmptyPuckStorageBreakStop2Red^.Framework.ResetStart := TRUE;
			END_IF
			pEmptyPuckStorageMainMergePrestopRed^.Framework.ResetStart := TRUE;
			pEmptyPuckStorageSpurMergePrestopRed^.Framework.ResetStart := TRUE;
			pEmptyPuckStorageMergeRed^.Framework.ResetStart := TRUE;
			pStn211Divert^.Framework.ResetStart := TRUE;
			pStn211MergePrestop^.Framework.ResetStart := TRUE;
			pStn211Merge^.Framework.ResetStart := TRUE;
			pBufferRecircEntryDivertRed^.Framework.ResetStart := TRUE;
			IF gDebug_ComponentCalls.CallStn053_41_BufferRecircMainMergePrestopRed THEN
				pBufferRecircMainMergePrestopRed^.Framework.ResetStart := TRUE;
			END_IF
			IF gDebug_ComponentCalls.CallStn053_42_BufferRecircSpurMergePrestopRed THEN
			 pBufferRecircSpurMergePrestopRed^.Framework.ResetStart := TRUE;
			END_IF
			IF gDebug_ComponentCalls.CallStn053_43_BufferRecircMergeRed THEN
				pBufferRecircMergeRed^.Framework.ResetStart := TRUE;
			END_IF
			IF gDebug_ComponentCalls.CallStn053_45_CleaningRecircExitDivertRed THEN
				pCleaningRecircExitDivertRed^.Framework.ResetStart := TRUE;
			END_IF
			pCleaningRecircExitMainMergePrestopRed^.Framework.ResetStart := TRUE;
			pCleaningRecircExitSpurMergePrestopRed^.Framework.ResetStart := TRUE;
			pCleaningRecircExitMergeRed^.Framework.ResetStart := TRUE;
			pStn221Divert^.Framework.ResetStart := TRUE;
			pStn221MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn221Merge^.Framework.ResetStart := TRUE;
			pStn222Divert^.Framework.ResetStart := TRUE;
			pStn222MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn222Merge^.Framework.ResetStart := TRUE;
			pStn231Divert^.Framework.ResetStart := TRUE;
			pStn231MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn231Merge^.Framework.ResetStart := TRUE;
			pStn232Divert^.Framework.ResetStart := TRUE;
			pStn232MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn232Merge^.Framework.ResetStart := TRUE;
			pGradingRecircEntryDivertRed^.Framework.ResetStart := TRUE;
			pTestRecircExitMainMergePrestopRed^.Framework.ResetStart := TRUE;
			pTestRecircExitSpurMergePrestopRed^.Framework.ResetStart := TRUE;
			pTestRecircExitMergeRed^.Framework.ResetStart := TRUE;
			pStn241Divert^.Framework.ResetStart := TRUE;
			pStn241MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn241Merge^.Framework.ResetStart := TRUE;
			pStn251Divert^.Framework.ResetStart := TRUE;
			pStn251MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn251Merge^.Framework.ResetStart := TRUE;
			pStn252Divert^.Framework.ResetStart := TRUE;
			pStn252MainMergePrestop^.Framework.ResetStart := TRUE;
			pStn252Merge^.Framework.ResetStart := TRUE;
			pTestRecircEntryDivertRed^.Framework.ResetStart := TRUE;
			pEvalRecircBreakStopsRed^.Framework.ResetStart := TRUE;
			IF gDebug_ComponentCalls.CallStn053_98_ReceivingBypassExitMergeMainPrestopBlu THEN
				pReceivingBypassExitMergeMainPrestopBlu^.Framework.ResetStart := TRUE;
			END_IF
			IF gDebug_ComponentCalls.CallStn053_99_ReceivingBypassExitMergeBlu THEN
				pReceivingBypassExitMergeBlu^.Framework.ResetStart := TRUE;
			END_IF
		END_IF
		
		Local.OKToStop := TRUE;
		
		IF 	pEvalLnSw^.Framework.ResetDone AND
				(pEvalBreakStopsBlu^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_22_EvalBreakStopsBlu) AND					
                pEvalBreakStopsRed^.Framework.ResetDone AND	
				pGrnRedRecircMergeMainPrestop^.Framework.ResetDone AND
				pGrnRedRecircMergeSpurPrestop^.Framework.ResetDone AND
				pGrnRedRecircMerge^.Framework.ResetDone AND
				pEmptyPuckStorageDivertRed^.Framework.ResetDone AND
				(pEmptyPuckStorageBreakStop1Red^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_25_EmptyPuckStorageBreakStop1Red) AND
				(pEmptyPuckStorageBreakStop2Red^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_26_EmptyPuckStorageBreakStop2Red) AND
				pEmptyPuckStorageMainMergePrestopRed^.Framework.ResetDone AND
				pEmptyPuckStorageSpurMergePrestopRed^.Framework.ResetDone AND
				pEmptyPuckStorageMergeRed^.Framework.ResetDone AND
				pStn211Divert^.Framework.ResetDone AND
				pStn211MergePrestop^.Framework.ResetDone AND
				pStn211Merge^.Framework.ResetDone AND
				pBufferRecircEntryDivertRed^.Framework.ResetDone AND
				(pBufferRecircMainMergePrestopRed^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_41_BufferRecircMainMergePrestopRed) AND
				(pBufferRecircSpurMergePrestopRed^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_42_BufferRecircSpurMergePrestopRed) AND
				(pBufferRecircMergeRed^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_43_BufferRecircMergeRed) AND
				(pCleaningRecircExitDivertRed^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_45_CleaningRecircExitDivertRed) AND
				pCleaningRecircExitMainMergePrestopRed^.Framework.ResetDone AND
				pCleaningRecircExitSpurMergePrestopRed^.Framework.ResetDone AND
				pCleaningRecircExitMergeRed^.Framework.ResetDone AND
				pStn221Divert^.Framework.ResetDone AND
				pStn221MainMergePrestop^.Framework.ResetDone AND
				pStn221Merge^.Framework.ResetDone AND
				pStn222Divert^.Framework.ResetDone AND
				pStn222MainMergePrestop^.Framework.ResetDone AND
				pStn222Merge^.Framework.ResetDone AND
				pStn231Divert^.Framework.ResetDone AND
				pStn231MainMergePrestop^.Framework.ResetDone AND
				pStn231Merge^.Framework.ResetDone AND
				pStn232Divert^.Framework.ResetDone AND
				pStn232MainMergePrestop^.Framework.ResetDone AND
				pStn232Merge^.Framework.ResetDone AND
				pGradingRecircEntryDivertRed^.Framework.ResetDone AND
				pTestRecircExitMainMergePrestopRed^.Framework.ResetDone AND
				pTestRecircExitSpurMergePrestopRed^.Framework.ResetDone AND
				pTestRecircExitMergeRed^.Framework.ResetDone AND
				pStn241Divert^.Framework.ResetDone AND
				pStn241MainMergePrestop^.Framework.ResetDone AND
				pStn241Merge^.Framework.ResetDone AND
				pStn251Divert^.Framework.ResetDone AND
				pStn251MainMergePrestop^.Framework.ResetDone AND
				pStn251Merge^.Framework.ResetDone AND
				pStn252Divert^.Framework.ResetDone AND
				pStn252MainMergePrestop^.Framework.ResetDone AND
				pStn252Merge^.Framework.ResetDone AND
				pTestRecircEntryDivertRed^.Framework.ResetDone AND
				pEvalRecircBreakStopsRed^.Framework.ResetDone AND
				(pReceivingBypassExitMergeMainPrestopBlu^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_98_ReceivingBypassExitMergeMainPrestopBlu) AND
				(pReceivingBypassExitMergeBlu^.Framework.ResetDone OR
				NOT gDebug_ComponentCalls.CallStn053_99_ReceivingBypassExitMergeBlu) THEN
			Local.NextState := 9998;
		END_IF
		
		IF Local.State <> Local.NextState THEN
			pEvalLnSw^.Framework.ResetStart := FALSE;
			pGrnRedRecircMergeMainPrestop^.Framework.ResetStart := FALSE;
			pGrnRedRecircMergeSpurPrestop^.Framework.ResetStart := FALSE;
			pEvalBreakStopsRed^.Framework.ResetStart := FALSE;
			pEvalBreakStopsBlu^.Framework.ResetStart := FALSE;
			pGrnRedRecircMerge^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageDivertRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageBreakStop1Red^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageBreakStop2Red^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pEmptyPuckStorageMergeRed^.Framework.ResetStart := FALSE;
			pStn211Divert^.Framework.ResetStart := FALSE;
			pStn211MergePrestop^.Framework.ResetStart := FALSE;
			pStn211Merge^.Framework.ResetStart := FALSE;
			pBufferRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pBufferRecircMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pBufferRecircSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pBufferRecircMergeRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitDivertRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pCleaningRecircExitMergeRed^.Framework.ResetStart := FALSE;
			pStn221Divert^.Framework.ResetStart := FALSE;
			pStn221MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn221Merge^.Framework.ResetStart := FALSE;
			pStn222Divert^.Framework.ResetStart := FALSE;
			pStn222MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn222Merge^.Framework.ResetStart := FALSE;
			pStn231Divert^.Framework.ResetStart := FALSE;
			pStn231MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn231Merge^.Framework.ResetStart := FALSE;
			pStn232Divert^.Framework.ResetStart := FALSE;
			pStn232MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn232Merge^.Framework.ResetStart := FALSE;
			pGradingRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pTestRecircExitMainMergePrestopRed^.Framework.ResetStart := FALSE;
			pTestRecircExitSpurMergePrestopRed^.Framework.ResetStart := FALSE;
			pTestRecircExitMergeRed^.Framework.ResetStart := FALSE;
			pStn241Divert^.Framework.ResetStart := FALSE;
			pStn241MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn241Merge^.Framework.ResetStart := FALSE;
			pStn251Divert^.Framework.ResetStart := FALSE;
			pStn251MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn251Merge^.Framework.ResetStart := FALSE;
			pStn252Divert^.Framework.ResetStart := FALSE;
			pStn252MainMergePrestop^.Framework.ResetStart := FALSE;
			pStn252Merge^.Framework.ResetStart := FALSE;
			pTestRecircEntryDivertRed^.Framework.ResetStart := FALSE;
			pEvalRecircBreakStopsRed^.Framework.ResetStart := FALSE;
			pReceivingBypassExitMergeMainPrestopBlu^.Framework.ResetStart := FALSE;
			pReceivingBypassExitMergeBlu^.Framework.ResetStart := FALSE;
		END_IF
		
	9998: (*Reset done*)
		
		IF Local.FirstEntry THEN
			pCmp^.Framework.FullInitRequired := FALSE;
			Local.FaultedState := 0;
			Local.AsynchFault := FALSE;
			Local.AsynchFaultReactionComplete := FALSE;
			pCmp^.Framework.ResetDone := TRUE;
		END_IF
		
		Local.OKToStop := TRUE;
		
		;
	
	9999: (*Manual cycle done*)
		
		IF Local.FirstEntry THEN
			Local.ManualCycleDone := TRUE;
		END_IF
		
		;
END_CASE

//############################# END SEQUENCE LOGIC #############################

// Set Attention Bit (if needed)
Local.Attention := FALSE;

// Summation of all manual cycle requests
Local.ManualCycleRequested := FALSE;

// *************************
//   Custom Fault Logic 
// *************************
// Supply any application/component specific data to be used in building fault records or handling of asynchronous faults, etc.
IF Local.tmrFault.Q AND Local.FaultNumber = 0 THEN
	Local.FaultNumber := 1; (*default number is 1*)
END_IF
MEMSET(ADR(Local.FaultData), 0, SIZEOF(Local.FaultData));

IF Local.LongFaultState THEN
	Local.FaultTimePreset := Local.FaultTimeLong;
ELSE
	Local.FaultTimePreset := Local.FaultTimeShort;
END_IF
Local.LongFaultState := FALSE;

IF NOT Local.AsynchFault AND Local.FaultNumber = 0 THEN
	IF FALSE THEN
		Local.AsynchFault := TRUE;
		Local.FaultNumber := 1;
	END_IF
END_IF

(*#### Manual operation ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual THEN
    ;
END_IF

(*#### Manual cycle ####*)
IF pStn^.OKForManual AND NOT Local.CycleManual AND NOT pStn^.CycleFaulted THEN
    ;
END_IF
(*
//HMI control to stop the conveyor motors
IF hiStopCartonConv AND NOT Local.CycleAuto THEN
	gProduced_Stn053ToSafetyInterface.Stn053PLCData[2].3 := TRUE;
END_IF
//HMI control to start the conveyor motors
IF hiStartCartonConv AND NOT Local.CycleAuto THEN
	gProduced_Stn053ToSafetyInterface.Stn053PLCData[2].3 := FALSE;
END_IF
*)

(*
IF hiStopAllComponents THEN	
//			pEvalLnSw^.FreeRunCycleStop := TRUE;
			pGrnRedRecircMergeMainPrestop^.FreeRunCycleStop := TRUE;
			pGrnRedRecircMergeSpurPrestop^.FreeRunCycleStop := TRUE;
//			pEvalBreakStopsRed^.FreeRunCycleStop := TRUE;
//			pEvalBreakStopsBlu^.FreeRunCycleStop := TRUE;
			pGrnRedRecircMerge^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageDivertRed^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageBreakStop1Red^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageBreakStop2Red^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageMainMergePrestopRed^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageSpurMergePrestopRed^.FreeRunCycleStop := TRUE;
			pEmptyPuckStorageMergeRed^.FreeRunCycleStop := TRUE;
			pStn211Divert^.FreeRunCycleStop := TRUE;
			pStn211MergePrestop^.FreeRunCycleStop := TRUE;
			pStn211Merge^.FreeRunCycleStop := TRUE;
			pBufferRecircEntryDivertRed^.FreeRunCycleStop := TRUE;
			pBufferRecircMainMergePrestopRed^.FreeRunCycleStop := TRUE;
			pBufferRecircSpurMergePrestopRed^.FreeRunCycleStop := TRUE;
			pBufferRecircMergeRed^.FreeRunCycleStop := TRUE;
			pCleaningRecircExitDivertRed^.FreeRunCycleStop := TRUE;
			pCleaningRecircExitMainMergePrestopRed^.FreeRunCycleStop := TRUE;
			pCleaningRecircExitSpurMergePrestopRed^.FreeRunCycleStop := TRUE;
			pCleaningRecircExitMergeRed^.FreeRunCycleStop := TRUE;
			pStn221Divert^.FreeRunCycleStop := TRUE;
			pStn221MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn221Merge^.FreeRunCycleStop := TRUE;
			pStn222Divert^.FreeRunCycleStop := TRUE;
			pStn222MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn222Merge^.FreeRunCycleStop := TRUE;
			pStn231Divert^.FreeRunCycleStop := TRUE;
			pStn231MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn231Merge^.FreeRunCycleStop := TRUE;
			pStn232Divert^.FreeRunCycleStop := TRUE;
			pStn232MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn232Merge^.FreeRunCycleStop := TRUE;
			pGradingRecircEntryDivertRed^.FreeRunCycleStop := TRUE;
			pTestRecircExitMainMergePrestopRed^.FreeRunCycleStop := TRUE;
			pTestRecircExitSpurMergePrestopRed^.FreeRunCycleStop := TRUE;
			pTestRecircExitMergeRed^.FreeRunCycleStop := TRUE;
			pStn241Divert^.FreeRunCycleStop := TRUE;
			pStn241MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn241Merge^.FreeRunCycleStop := TRUE;
			pStn251Divert^.FreeRunCycleStop := TRUE;
			pStn251MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn251Merge^.FreeRunCycleStop := TRUE;
			pStn252Divert^.FreeRunCycleStop := TRUE;
			pStn252MainMergePrestop^.FreeRunCycleStop := TRUE;
			pStn252Merge^.FreeRunCycleStop := TRUE;
			pTestRecircEntryDivertRed^.FreeRunCycleStop := TRUE;
			pEvalRecircBreakStopsRed^.FreeRunCycleStop := TRUE;
			pReceivingBypassExitMergeMainPrestopBlu^.FreeRunCycleStop := TRUE;
			pReceivingBypassExitMergeBlu^.FreeRunCycleStop := TRUE;	

	pStn^.hiCycleStop := TRUE;	//comment the prgs NOT with FreeRun
	pStn^.FullInitRequired := TRUE;
	
END_IF
*)

(*#### Always turn off hi requests ####*)
(*
	hiStopCartonConv := FALSE;
	hiStartCartonConv := FALSE;
	hiStopAllComponents := FALSE;
	;
*)

(*#### Always turn off hi requests ####*)
	;

(*### Simulation Logic ###*)
IF NOT gSimulateActive THEN
	pEvalLnSw^.Sim.SimMode := 0;
END_IF

CASE pEvalLnSw^.Sim.SimMode OF
	0:
		NoSim();
	1:
		Sim_01();
	2:
		Sim_02();
	3:
		Sim_03();
	ELSE
		NoSim();
END_CASE

ForceBootUpdate := TRUE;


]]></ST>
    </Implementation>
    <Action Name="DfnMessages" Id="{3cde54bd-0555-4f4d-9962-d70f2f1d49a2}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <Action Name="NoSim" Id="{a531e27c-a7cb-4cd1-9d94-56cc50309ef8}">
      <Implementation>
        <ST><![CDATA[pEvalLnSw^.Sim.TC_VersionToCall := 0;

onsNotFirstScan(CLK:=NOT gFirstScan);
IF onsNotFirstScan.Q THEN
	pEvalLnSw^.LaneEnabled[cLaneSel.Green] := TRUE;
	pEvalLnSw^.LaneEnabled[cLaneSel.Red] := TRUE;
	pEvalLnSw^.LaneEnabled[cLaneSel.Blue] := TRUE;
END_IF

MEMSET(ADR(pEvalLnSwPrestopMainGrn^.Sim),0,SIZEOF(pEvalLnSwPrestopMainGrn^.Sim));
MEMSET(ADR(pEvalLnSwPrestopMainRed^.Sim),0,SIZEOF(pEvalLnSwPrestopMainRed^.Sim));
MEMSET(ADR(pEvalLnSwPrestopMainBlu^.Sim),0,SIZEOF(pEvalLnSwPrestopMainBlu^.Sim));
MEMSET(ADR(pEvalLnSw^.Sim),0,SIZEOF(pEvalLnSw^.Sim));]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoteBreakStop" Id="{a11714f0-4483-4132-bdb5-c75191ed50e2}">
      <Implementation>
        <ST><![CDATA[
// Mapping of outputs that are on VB controlled primarily by Stn53 but has a few outputs that are owned by Stn52 based on station boundries.
// These are primarily "upstream" of the Stn53 three lane switch
oStopLowerBreakStopReceivingGrn31 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].0 AND gConsumed_SafetyInterfaceTo053_OK;        
oStopLowerBreakStopReceivingGrn32 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].1 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingGrn33 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].2 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingRed31 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].3 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingRed32 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].4 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingRed33 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].5 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingBlu32 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].6 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingBlu33 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].7 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopReceivingBlu34 := gConsumed_SafetyInterfaceConv.Stn052PLCData[0].8 AND gConsumed_SafetyInterfaceTo053_OK;

// Mapping of outputs that are on VB controlled primarily by Stn53 but has a few outputs that are owned by Stn54 based on station boundries.
// These are primarily "downstream" of the Stn53 three lane switch

oStopLowerBreakStopEvalGrn02 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].0 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopEvalGrn03 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].1 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerRedGrnRecircMergePrestopGrn := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].2 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerRedGrnRecircMergePrestopRed := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].3 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerBreakStopEvalGrn04 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].4 AND gConsumed_SafetyInterfaceTo053_OK;


// These are from the tail end after to the bulk of green eval and headed to storage switch
oStopLowerBreakStopEvalGrn26 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].20 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerBreakStopEvalGrn27 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].21 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerBreakStopEvalGrn28 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].22 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerBreakStopEvalGrn29 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].23 AND gConsumed_SafetyInterfaceTo053_OK;   
oStopLowerBreakStopEvalGrn30 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].24 AND gConsumed_SafetyInterfaceTo053_OK;
oStopLowerBreakStopEvalGrn31 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].25 AND gConsumed_SafetyInterfaceTo053_OK; 
oStopLowerBreakStopEvalGrn32 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].26 AND gConsumed_SafetyInterfaceTo053_OK; 
oStopLowerBreakStopEvalRecircGrn27 := gConsumed_SafetyInterfaceConv.Stn054PLCData[1].27 AND gConsumed_SafetyInterfaceTo053_OK;   
 
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Sim_01" Id="{11f195b4-e404-4855-9d37-a670539e6b9b}">
      <Implementation>
        <ST><![CDATA[//Select which traffic control to use
pEvalLnSw^.Sim.TC_VersionToCall := 1;


pEvalLnSwPrestopMainGrn^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainRed^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainBlu^.Sim.TestRFIDData := 404;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Sim_02" Id="{2fbf89d9-e103-4fc6-b046-510e18a3ed57}">
      <Implementation>
        <ST><![CDATA[//Select which traffic control to use
pEvalLnSw^.Sim.TC_VersionToCall := 2;


pEvalLnSwPrestopMainGrn^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainRed^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainBlu^.Sim.TestRFIDData := 404;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Sim_03" Id="{40052fb1-c25d-47a2-8840-a7f9ea8ebe6e}">
      <Implementation>
        <ST><![CDATA[//Select which traffic control to use
pEvalLnSw^.Sim.TC_VersionToCall := 3;


pEvalLnSwPrestopMainGrn^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainRed^.Sim.TestRFIDData := 404;
pEvalLnSwPrestopMainBlu^.Sim.TestRFIDData := 404;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Stn053_05_StnMain">
      <LineId Id="3" Count="79" />
      <LineId Id="86" Count="400" />
      <LineId Id="653" Count="12" />
      <LineId Id="702" Count="51" />
      <LineId Id="688" Count="13" />
      <LineId Id="487" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.DfnMessages">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.NoSim">
      <LineId Id="2" Count="0" />
      <LineId Id="19" Count="5" />
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.RemoteBreakStop">
      <LineId Id="2" Count="15" />
      <LineId Id="37" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="21" Count="8" />
      <LineId Id="32" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.Sim_01">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.Sim_02">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Stn053_05_StnMain.Sim_03">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>