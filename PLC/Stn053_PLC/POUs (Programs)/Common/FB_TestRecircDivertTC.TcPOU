<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_TestRecircDivertTC" Id="{540d9a26-c5d3-415f-bee8-a4dd6768fc4f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TestRecircDivertTC
VAR_INPUT
	pCmp: POINTER TO CmpConvDivert;
	DivertOnlyExceptions: BOOL;
	InBypassThisStn: BOOL;
END_VAR
VAR
	MainRunning: BOOL;
	SpurRunning: BOOL;
	onsPuckReady: R_TRIG;
	ResolvedDBStatusRoutePrepRed: cResolvedDBStatusRoute;
	ResolvedDBStatusRouteTestRed: cResolvedDBStatusRoute;
	DBRouteToSpur_Empty: BOOL;
	DBRouteToSpur_Full: BOOL;
	RouteToSpur: BOOL;
	ReleaseToNotBlockMain: TON;
	tmrSpurNOKThrottle_Pilot: TON;
	onsDivertActedOnRelease: R_TRIG;
	LastEmptyWasSentToMain: BOOL;
	Debug_DivertAllToMain: BOOL;
	Debug_DivertAllToSpur: BOOL;
	Debug_DivertEmpties: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Traffic control for specific dirvert - TestRecirc
// 
// Currently each divert has independent/unique function block as it is expected that they will
//   eventually need to be tweeked for specific application

// Sum of main/spur running conditions... don't release if not running
MainRunning :=
	pCmp^.MainHeartbeatOK AND
	pCmp^.MainConvRunning;

SpurRunning :=
	pCmp^.SpurHeartbeatOK AND
	pCmp^.SpurConvRunning;
	
// On falling edge of request note if status of puck indicates that it could go to spur
//   and set bit based on which way it was actually told to release.
// Note: this logic must be above the decision logic so it reflects the result from last scan
onsDivertActedOnRelease(CLK:=NOT pCmp^.PuckReady);
IF onsDivertActedOnRelease.Q AND RouteToSpur THEN
	LastEmptyWasSentToMain := pCmp^.PuckReleaseMain;	
END_IF;		

(*
// Use DB supplied status (and route as needed) to determine if puck should go to spur
// This is evaluated every scan so is always current to respond to changing conditions.
// Generally will release to main line if not routed to this spur but may release to main even if
//   routed to this spur so downstream station is not starved
*)

// On rising edege of puck ready interperate the puck/device data to see if it should be diverted to spur
onsPuckReady(CLK:=pCmp^.PuckReady);
IF onsPuckReady.Q THEN 	
	// Call function to turn DB puck/device status/route into single readable resolution
	ResolvedDBStatusRoutePrepRed :=
		FN_ResolveDBStatusRoutePuck(
			Puck := pCmp^.Puck,
			RouteToWork := cDBDetailRoute.PrepRed);
			
	ResolvedDBStatusRouteTestRed :=
		FN_ResolveDBStatusRoutePuck(
			Puck := pCmp^.Puck,
			RouteToWork := cDBDetailRoute.TestRed);
		
	// Use DB route and other possible line status to determine if puck should go to spur
	DBRouteToSpur_Empty := 
		ResolvedDBStatusRoutePrepRed = cResolvedDBStatusRoute.Empty_NoRoute OR
		ResolvedDBStatusRoutePrepRed = cResolvedDBStatusRoute.Empty_RoutedThisStation OR
		ResolvedDBStatusRoutePrepRed = cResolvedDBStatusRoute.Empty_RoutedOtherStation;
	
	DBRouteToSpur_Full := 
		ResolvedDBStatusRoutePrepRed = cResolvedDBStatusRoute.Normal_RoutedThisStation OR
		ResolvedDBStatusRouteTestRed = cResolvedDBStatusRoute.Normal_RoutedThisStation;

END_IF

//  Note that only "full" puck receving as determined above are headed to exception which only occurs on pilot)
//    Also only for pilot allow the station to request blcoking empties/only divet fulls if idle so exception have easy room to come off)
RouteToSpur := 
	DBRouteToSpur_Full OR
	(DBRouteToSpur_Empty AND
	Debug_DivertEmpties);

// For CRTC1 we must keep pucks circulating at full speed since there are so many downstream stations that a simple
//   buffer full type check will not work.  If a full set of status and data is avaiable in the future then something
//   may be able to make a complex choice... but not here, not now.
// For pilot, since it is linear and less complex so some slight delay for now...	
ReleaseToNotBlockMain(IN := (NOT SpurRunning OR pCmp^.SpurBufferFull),
	PT := T#2S);
	
// Release main if DB route is not to spur, or even if it is to spur when this station is bypassed,
//   or release to not block main line traffic, or if CRTC1 to release eveey other spur heading puck downstream
//   for partner station to have work.
pCmp^.PuckReleaseMain := 
	pCmp^.PuckReady AND
	MainRunning AND
	((NOT RouteToSpur OR
	(RouteToSpur AND 
	(InBypassThisStn OR
	ReleaseToNotBlockMain.Q))) OR
	Debug_DivertAllToMain) AND
	NOT Debug_DivertAllToSpur;

// Release to spur if that is route and it is available.
//    and not trying to keep downstream station fed.
pCmp^.PuckReleaseSpur :=
	pCmp^.PuckReady AND
	MainRunning AND
	SpurRunning AND
	((RouteToSpur AND
	NOT InBypassThisStn) OR
	Debug_DivertAllToSpur) AND
	NOT Debug_DivertAllToMain;
	]]></ST>
    </Implementation>
    <LineIds Name="FB_TestRecircDivertTC">
      <LineId Id="3" Count="26" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="8" />
      <LineId Id="180" Count="0" />
      <LineId Id="182" Count="2" />
      <LineId Id="181" Count="0" />
      <LineId Id="60" Count="7" />
      <LineId Id="71" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="72" Count="5" />
      <LineId Id="79" Count="1" />
      <LineId Id="227" Count="30" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>